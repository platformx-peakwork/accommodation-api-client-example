// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offerdata.proto

package com.peakwork.api.accommodation.v1.offerdata;

/**
 * <pre>
 * Contains offer data associated with one board. The offer data is only valid for the board given by its
 * board_identifier. A Board_OfferData entity is to be used in a certain entity (e.g. Room_OfferData) to specify the
 * context of the offer data even further.
 * Keys: board_identifier
 * Values: offer_groups
 * </pre>
 *
 * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.Board_OfferData}
 */
public  final class Board_OfferData extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:peakwork.api.accommodation.v1.offerdata.Board_OfferData)
    Board_OfferDataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Board_OfferData.newBuilder() to construct.
  private Board_OfferData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Board_OfferData() {
    boardIdentifier_ = "";
    offerGroups_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Board_OfferData(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            boardIdentifier_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              offerGroups_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.OfferGroup>();
              mutable_bitField0_ |= 0x00000002;
            }
            offerGroups_.add(
                input.readMessage(com.peakwork.api.accommodation.v1.offerdata.OfferGroup.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        offerGroups_ = java.util.Collections.unmodifiableList(offerGroups_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Board_OfferData_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Board_OfferData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.class, com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder.class);
  }

  private int bitField0_;
  public static final int BOARD_IDENTIFIER_FIELD_NUMBER = 1;
  private volatile java.lang.Object boardIdentifier_;
  /**
   * <pre>
   * mandatory - Identifier for the board used by the supplier. This identifier references a board
   * entity (boardIdentifier) from the BaseDataService. See boardIdentifier of Board.
   * The offer information of this message is valid for the referenced board only.
   * </pre>
   *
   * <code>string board_identifier = 1;</code>
   */
  public java.lang.String getBoardIdentifier() {
    java.lang.Object ref = boardIdentifier_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      boardIdentifier_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * mandatory - Identifier for the board used by the supplier. This identifier references a board
   * entity (boardIdentifier) from the BaseDataService. See boardIdentifier of Board.
   * The offer information of this message is valid for the referenced board only.
   * </pre>
   *
   * <code>string board_identifier = 1;</code>
   */
  public com.google.protobuf.ByteString
      getBoardIdentifierBytes() {
    java.lang.Object ref = boardIdentifier_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      boardIdentifier_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OFFER_GROUPS_FIELD_NUMBER = 2;
  private java.util.List<com.peakwork.api.accommodation.v1.offerdata.OfferGroup> offerGroups_;
  /**
   * <pre>
   * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
   * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
   * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
   * structures.
   * See OfferGroup for more details.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
   */
  public java.util.List<com.peakwork.api.accommodation.v1.offerdata.OfferGroup> getOfferGroupsList() {
    return offerGroups_;
  }
  /**
   * <pre>
   * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
   * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
   * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
   * structures.
   * See OfferGroup for more details.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
   */
  public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.OfferGroupOrBuilder> 
      getOfferGroupsOrBuilderList() {
    return offerGroups_;
  }
  /**
   * <pre>
   * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
   * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
   * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
   * structures.
   * See OfferGroup for more details.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
   */
  public int getOfferGroupsCount() {
    return offerGroups_.size();
  }
  /**
   * <pre>
   * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
   * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
   * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
   * structures.
   * See OfferGroup for more details.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.OfferGroup getOfferGroups(int index) {
    return offerGroups_.get(index);
  }
  /**
   * <pre>
   * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
   * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
   * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
   * structures.
   * See OfferGroup for more details.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.OfferGroupOrBuilder getOfferGroupsOrBuilder(
      int index) {
    return offerGroups_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getBoardIdentifierBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, boardIdentifier_);
    }
    for (int i = 0; i < offerGroups_.size(); i++) {
      output.writeMessage(2, offerGroups_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getBoardIdentifierBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, boardIdentifier_);
    }
    for (int i = 0; i < offerGroups_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, offerGroups_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.peakwork.api.accommodation.v1.offerdata.Board_OfferData)) {
      return super.equals(obj);
    }
    com.peakwork.api.accommodation.v1.offerdata.Board_OfferData other = (com.peakwork.api.accommodation.v1.offerdata.Board_OfferData) obj;

    if (!getBoardIdentifier()
        .equals(other.getBoardIdentifier())) return false;
    if (!getOfferGroupsList()
        .equals(other.getOfferGroupsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + BOARD_IDENTIFIER_FIELD_NUMBER;
    hash = (53 * hash) + getBoardIdentifier().hashCode();
    if (getOfferGroupsCount() > 0) {
      hash = (37 * hash) + OFFER_GROUPS_FIELD_NUMBER;
      hash = (53 * hash) + getOfferGroupsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.peakwork.api.accommodation.v1.offerdata.Board_OfferData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Contains offer data associated with one board. The offer data is only valid for the board given by its
   * board_identifier. A Board_OfferData entity is to be used in a certain entity (e.g. Room_OfferData) to specify the
   * context of the offer data even further.
   * Keys: board_identifier
   * Values: offer_groups
   * </pre>
   *
   * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.Board_OfferData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:peakwork.api.accommodation.v1.offerdata.Board_OfferData)
      com.peakwork.api.accommodation.v1.offerdata.Board_OfferDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Board_OfferData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Board_OfferData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.class, com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder.class);
    }

    // Construct using com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getOfferGroupsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      boardIdentifier_ = "";

      if (offerGroupsBuilder_ == null) {
        offerGroups_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        offerGroupsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Board_OfferData_descriptor;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.Board_OfferData getDefaultInstanceForType() {
      return com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.getDefaultInstance();
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.Board_OfferData build() {
      com.peakwork.api.accommodation.v1.offerdata.Board_OfferData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.Board_OfferData buildPartial() {
      com.peakwork.api.accommodation.v1.offerdata.Board_OfferData result = new com.peakwork.api.accommodation.v1.offerdata.Board_OfferData(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.boardIdentifier_ = boardIdentifier_;
      if (offerGroupsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          offerGroups_ = java.util.Collections.unmodifiableList(offerGroups_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.offerGroups_ = offerGroups_;
      } else {
        result.offerGroups_ = offerGroupsBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.peakwork.api.accommodation.v1.offerdata.Board_OfferData) {
        return mergeFrom((com.peakwork.api.accommodation.v1.offerdata.Board_OfferData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.peakwork.api.accommodation.v1.offerdata.Board_OfferData other) {
      if (other == com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.getDefaultInstance()) return this;
      if (!other.getBoardIdentifier().isEmpty()) {
        boardIdentifier_ = other.boardIdentifier_;
        onChanged();
      }
      if (offerGroupsBuilder_ == null) {
        if (!other.offerGroups_.isEmpty()) {
          if (offerGroups_.isEmpty()) {
            offerGroups_ = other.offerGroups_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureOfferGroupsIsMutable();
            offerGroups_.addAll(other.offerGroups_);
          }
          onChanged();
        }
      } else {
        if (!other.offerGroups_.isEmpty()) {
          if (offerGroupsBuilder_.isEmpty()) {
            offerGroupsBuilder_.dispose();
            offerGroupsBuilder_ = null;
            offerGroups_ = other.offerGroups_;
            bitField0_ = (bitField0_ & ~0x00000002);
            offerGroupsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getOfferGroupsFieldBuilder() : null;
          } else {
            offerGroupsBuilder_.addAllMessages(other.offerGroups_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.peakwork.api.accommodation.v1.offerdata.Board_OfferData parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.peakwork.api.accommodation.v1.offerdata.Board_OfferData) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object boardIdentifier_ = "";
    /**
     * <pre>
     * mandatory - Identifier for the board used by the supplier. This identifier references a board
     * entity (boardIdentifier) from the BaseDataService. See boardIdentifier of Board.
     * The offer information of this message is valid for the referenced board only.
     * </pre>
     *
     * <code>string board_identifier = 1;</code>
     */
    public java.lang.String getBoardIdentifier() {
      java.lang.Object ref = boardIdentifier_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        boardIdentifier_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Identifier for the board used by the supplier. This identifier references a board
     * entity (boardIdentifier) from the BaseDataService. See boardIdentifier of Board.
     * The offer information of this message is valid for the referenced board only.
     * </pre>
     *
     * <code>string board_identifier = 1;</code>
     */
    public com.google.protobuf.ByteString
        getBoardIdentifierBytes() {
      java.lang.Object ref = boardIdentifier_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        boardIdentifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Identifier for the board used by the supplier. This identifier references a board
     * entity (boardIdentifier) from the BaseDataService. See boardIdentifier of Board.
     * The offer information of this message is valid for the referenced board only.
     * </pre>
     *
     * <code>string board_identifier = 1;</code>
     */
    public Builder setBoardIdentifier(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      boardIdentifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Identifier for the board used by the supplier. This identifier references a board
     * entity (boardIdentifier) from the BaseDataService. See boardIdentifier of Board.
     * The offer information of this message is valid for the referenced board only.
     * </pre>
     *
     * <code>string board_identifier = 1;</code>
     */
    public Builder clearBoardIdentifier() {
      
      boardIdentifier_ = getDefaultInstance().getBoardIdentifier();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Identifier for the board used by the supplier. This identifier references a board
     * entity (boardIdentifier) from the BaseDataService. See boardIdentifier of Board.
     * The offer information of this message is valid for the referenced board only.
     * </pre>
     *
     * <code>string board_identifier = 1;</code>
     */
    public Builder setBoardIdentifierBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      boardIdentifier_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.peakwork.api.accommodation.v1.offerdata.OfferGroup> offerGroups_ =
      java.util.Collections.emptyList();
    private void ensureOfferGroupsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        offerGroups_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.OfferGroup>(offerGroups_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.OfferGroup, com.peakwork.api.accommodation.v1.offerdata.OfferGroup.Builder, com.peakwork.api.accommodation.v1.offerdata.OfferGroupOrBuilder> offerGroupsBuilder_;

    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.OfferGroup> getOfferGroupsList() {
      if (offerGroupsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(offerGroups_);
      } else {
        return offerGroupsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public int getOfferGroupsCount() {
      if (offerGroupsBuilder_ == null) {
        return offerGroups_.size();
      } else {
        return offerGroupsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.OfferGroup getOfferGroups(int index) {
      if (offerGroupsBuilder_ == null) {
        return offerGroups_.get(index);
      } else {
        return offerGroupsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public Builder setOfferGroups(
        int index, com.peakwork.api.accommodation.v1.offerdata.OfferGroup value) {
      if (offerGroupsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOfferGroupsIsMutable();
        offerGroups_.set(index, value);
        onChanged();
      } else {
        offerGroupsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public Builder setOfferGroups(
        int index, com.peakwork.api.accommodation.v1.offerdata.OfferGroup.Builder builderForValue) {
      if (offerGroupsBuilder_ == null) {
        ensureOfferGroupsIsMutable();
        offerGroups_.set(index, builderForValue.build());
        onChanged();
      } else {
        offerGroupsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public Builder addOfferGroups(com.peakwork.api.accommodation.v1.offerdata.OfferGroup value) {
      if (offerGroupsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOfferGroupsIsMutable();
        offerGroups_.add(value);
        onChanged();
      } else {
        offerGroupsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public Builder addOfferGroups(
        int index, com.peakwork.api.accommodation.v1.offerdata.OfferGroup value) {
      if (offerGroupsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOfferGroupsIsMutable();
        offerGroups_.add(index, value);
        onChanged();
      } else {
        offerGroupsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public Builder addOfferGroups(
        com.peakwork.api.accommodation.v1.offerdata.OfferGroup.Builder builderForValue) {
      if (offerGroupsBuilder_ == null) {
        ensureOfferGroupsIsMutable();
        offerGroups_.add(builderForValue.build());
        onChanged();
      } else {
        offerGroupsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public Builder addOfferGroups(
        int index, com.peakwork.api.accommodation.v1.offerdata.OfferGroup.Builder builderForValue) {
      if (offerGroupsBuilder_ == null) {
        ensureOfferGroupsIsMutable();
        offerGroups_.add(index, builderForValue.build());
        onChanged();
      } else {
        offerGroupsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public Builder addAllOfferGroups(
        java.lang.Iterable<? extends com.peakwork.api.accommodation.v1.offerdata.OfferGroup> values) {
      if (offerGroupsBuilder_ == null) {
        ensureOfferGroupsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, offerGroups_);
        onChanged();
      } else {
        offerGroupsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public Builder clearOfferGroups() {
      if (offerGroupsBuilder_ == null) {
        offerGroups_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        offerGroupsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public Builder removeOfferGroups(int index) {
      if (offerGroupsBuilder_ == null) {
        ensureOfferGroupsIsMutable();
        offerGroups_.remove(index);
        onChanged();
      } else {
        offerGroupsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.OfferGroup.Builder getOfferGroupsBuilder(
        int index) {
      return getOfferGroupsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.OfferGroupOrBuilder getOfferGroupsOrBuilder(
        int index) {
      if (offerGroupsBuilder_ == null) {
        return offerGroups_.get(index);  } else {
        return offerGroupsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.OfferGroupOrBuilder> 
         getOfferGroupsOrBuilderList() {
      if (offerGroupsBuilder_ != null) {
        return offerGroupsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(offerGroups_);
      }
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.OfferGroup.Builder addOfferGroupsBuilder() {
      return getOfferGroupsFieldBuilder().addBuilder(
          com.peakwork.api.accommodation.v1.offerdata.OfferGroup.getDefaultInstance());
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.OfferGroup.Builder addOfferGroupsBuilder(
        int index) {
      return getOfferGroupsFieldBuilder().addBuilder(
          index, com.peakwork.api.accommodation.v1.offerdata.OfferGroup.getDefaultInstance());
    }
    /**
     * <pre>
     * mandatory - A list of offer groups. Each offer group contains multiple arrival dates and LOSs, to which the same
     * pricing structure applies, as well as the price information itself (in form of references to the price_sets).
     * Multiple offer groups can be given to represent different arrival date and LOS combinations with different pricing
     * structures.
     * See OfferGroup for more details.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.OfferGroup offer_groups = 2;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.OfferGroup.Builder> 
         getOfferGroupsBuilderList() {
      return getOfferGroupsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.OfferGroup, com.peakwork.api.accommodation.v1.offerdata.OfferGroup.Builder, com.peakwork.api.accommodation.v1.offerdata.OfferGroupOrBuilder> 
        getOfferGroupsFieldBuilder() {
      if (offerGroupsBuilder_ == null) {
        offerGroupsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.peakwork.api.accommodation.v1.offerdata.OfferGroup, com.peakwork.api.accommodation.v1.offerdata.OfferGroup.Builder, com.peakwork.api.accommodation.v1.offerdata.OfferGroupOrBuilder>(
                offerGroups_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        offerGroups_ = null;
      }
      return offerGroupsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:peakwork.api.accommodation.v1.offerdata.Board_OfferData)
  }

  // @@protoc_insertion_point(class_scope:peakwork.api.accommodation.v1.offerdata.Board_OfferData)
  private static final com.peakwork.api.accommodation.v1.offerdata.Board_OfferData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.peakwork.api.accommodation.v1.offerdata.Board_OfferData();
  }

  public static com.peakwork.api.accommodation.v1.offerdata.Board_OfferData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Board_OfferData>
      PARSER = new com.google.protobuf.AbstractParser<Board_OfferData>() {
    @java.lang.Override
    public Board_OfferData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Board_OfferData(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Board_OfferData> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Board_OfferData> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.peakwork.api.accommodation.v1.offerdata.Board_OfferData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

