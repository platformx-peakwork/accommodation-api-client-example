// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basedata.proto

package com.peakwork.api.accommodation.v1.basedata;

/**
 * <pre>
 * Represents an occupancy, i.e. a set of possible combinations of persons (pax) in a travel. An occupancy distinguishes
 * between three types of persons: adults, children and infants. To which type a person is assigned is determined by the
 * persons's age (see min_child_age and max_child_age).
 * The set of possible combinations of persons allowed by an occupancy is determined by a set of restrictions on the
 * counts of persons per person type as well as the overall person count. If a combination of persons meets all of these
 * restrictions, this combination is included in the set of possible person combinations, that the occupancy defines.
 * </pre>
 *
 * Protobuf type {@code peakwork.api.accommodation.v1.basedata.Occupancy}
 */
public  final class Occupancy extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:peakwork.api.accommodation.v1.basedata.Occupancy)
    OccupancyOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Occupancy.newBuilder() to construct.
  private Occupancy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Occupancy() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Occupancy(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            minPax_ = input.readInt32();
            break;
          }
          case 16: {

            maxPax_ = input.readInt32();
            break;
          }
          case 24: {

            minAdults_ = input.readInt32();
            break;
          }
          case 32: {

            maxAdults_ = input.readInt32();
            break;
          }
          case 40: {

            minChildren_ = input.readInt32();
            break;
          }
          case 48: {

            maxChildren_ = input.readInt32();
            break;
          }
          case 56: {

            minChildAge_ = input.readInt32();
            break;
          }
          case 64: {

            maxChildAge_ = input.readInt32();
            break;
          }
          case 72: {

            maxInfants_ = input.readInt32();
            break;
          }
          case 80: {

            infantsApplyToOccupancy_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Occupancy_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Occupancy_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.peakwork.api.accommodation.v1.basedata.Occupancy.class, com.peakwork.api.accommodation.v1.basedata.Occupancy.Builder.class);
  }

  public static final int MIN_PAX_FIELD_NUMBER = 1;
  private int minPax_;
  /**
   * <pre>
   * optional - default: 1 - Minimum number of persons allowed in total. Must be greater than or equal to 1.
   * </pre>
   *
   * <code>int32 min_pax = 1;</code>
   */
  public int getMinPax() {
    return minPax_;
  }

  public static final int MAX_PAX_FIELD_NUMBER = 2;
  private int maxPax_;
  /**
   * <pre>
   * mandatory - Maximum number of persons allowed in total.
   * </pre>
   *
   * <code>int32 max_pax = 2;</code>
   */
  public int getMaxPax() {
    return maxPax_;
  }

  public static final int MIN_ADULTS_FIELD_NUMBER = 3;
  private int minAdults_;
  /**
   * <pre>
   * optional - default: 1 - Minimum number of adults allowed. Must be greater than or equal to 1.
   * </pre>
   *
   * <code>int32 min_adults = 3;</code>
   */
  public int getMinAdults() {
    return minAdults_;
  }

  public static final int MAX_ADULTS_FIELD_NUMBER = 4;
  private int maxAdults_;
  /**
   * <pre>
   * optional - Maximum number of adults allowed.
   * </pre>
   *
   * <code>int32 max_adults = 4;</code>
   */
  public int getMaxAdults() {
    return maxAdults_;
  }

  public static final int MIN_CHILDREN_FIELD_NUMBER = 5;
  private int minChildren_;
  /**
   * <pre>
   * optional - default: 0 - Minimum number of children allowed.
   * </pre>
   *
   * <code>int32 min_children = 5;</code>
   */
  public int getMinChildren() {
    return minChildren_;
  }

  public static final int MAX_CHILDREN_FIELD_NUMBER = 6;
  private int maxChildren_;
  /**
   * <pre>
   * optional - default: 0 - Maximum number of children allowed.
   * </pre>
   *
   * <code>int32 max_children = 6;</code>
   */
  public int getMaxChildren() {
    return maxChildren_;
  }

  public static final int MIN_CHILD_AGE_FIELD_NUMBER = 7;
  private int minChildAge_;
  /**
   * <pre>
   * optional - default: 2 - Minimum age in years, where a person is considered a child (inclusive). Persons younger
   * than this age are considered infants. Persons older than this age are considered either children or adults,
   * depending on max_child_age.
   * </pre>
   *
   * <code>int32 min_child_age = 7;</code>
   */
  public int getMinChildAge() {
    return minChildAge_;
  }

  public static final int MAX_CHILD_AGE_FIELD_NUMBER = 8;
  private int maxChildAge_;
  /**
   * <pre>
   * optional - default: 17 - Maximum age in years, where a person is considered a child (inclusive). Persons older than
   * this age are considered adults. Persons younger than this age are considered either children or infants, depending
   * on min_child_age.
   * </pre>
   *
   * <code>int32 max_child_age = 8;</code>
   */
  public int getMaxChildAge() {
    return maxChildAge_;
  }

  public static final int MAX_INFANTS_FIELD_NUMBER = 9;
  private int maxInfants_;
  /**
   * <pre>
   * optional - Maximum number of infants allowed. If not given, no maximum restrictions towards infants apply.
   * </pre>
   *
   * <code>int32 max_infants = 9;</code>
   */
  public int getMaxInfants() {
    return maxInfants_;
  }

  public static final int INFANTS_APPLY_TO_OCCUPANCY_FIELD_NUMBER = 10;
  private boolean infantsApplyToOccupancy_;
  /**
   * <pre>
   * optional - default: false - Defines whether or not infants are counted towards the total pax restrictions (min_pax
   * and max_pax). If true, infants count towards the total pax count, i.e. the total pax count including infants
   * cannot exceed the max_pax restrictions and the min_pax restriction can be met by infants. If false, infants do not
   * count towards the total pax count, i.e. the total pax count including infants may exceed max_pax and infants do not
   * count towards min_pax.
   * </pre>
   *
   * <code>bool infants_apply_to_occupancy = 10;</code>
   */
  public boolean getInfantsApplyToOccupancy() {
    return infantsApplyToOccupancy_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (minPax_ != 0) {
      output.writeInt32(1, minPax_);
    }
    if (maxPax_ != 0) {
      output.writeInt32(2, maxPax_);
    }
    if (minAdults_ != 0) {
      output.writeInt32(3, minAdults_);
    }
    if (maxAdults_ != 0) {
      output.writeInt32(4, maxAdults_);
    }
    if (minChildren_ != 0) {
      output.writeInt32(5, minChildren_);
    }
    if (maxChildren_ != 0) {
      output.writeInt32(6, maxChildren_);
    }
    if (minChildAge_ != 0) {
      output.writeInt32(7, minChildAge_);
    }
    if (maxChildAge_ != 0) {
      output.writeInt32(8, maxChildAge_);
    }
    if (maxInfants_ != 0) {
      output.writeInt32(9, maxInfants_);
    }
    if (infantsApplyToOccupancy_ != false) {
      output.writeBool(10, infantsApplyToOccupancy_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (minPax_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, minPax_);
    }
    if (maxPax_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, maxPax_);
    }
    if (minAdults_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, minAdults_);
    }
    if (maxAdults_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, maxAdults_);
    }
    if (minChildren_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, minChildren_);
    }
    if (maxChildren_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, maxChildren_);
    }
    if (minChildAge_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, minChildAge_);
    }
    if (maxChildAge_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, maxChildAge_);
    }
    if (maxInfants_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, maxInfants_);
    }
    if (infantsApplyToOccupancy_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(10, infantsApplyToOccupancy_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.peakwork.api.accommodation.v1.basedata.Occupancy)) {
      return super.equals(obj);
    }
    com.peakwork.api.accommodation.v1.basedata.Occupancy other = (com.peakwork.api.accommodation.v1.basedata.Occupancy) obj;

    if (getMinPax()
        != other.getMinPax()) return false;
    if (getMaxPax()
        != other.getMaxPax()) return false;
    if (getMinAdults()
        != other.getMinAdults()) return false;
    if (getMaxAdults()
        != other.getMaxAdults()) return false;
    if (getMinChildren()
        != other.getMinChildren()) return false;
    if (getMaxChildren()
        != other.getMaxChildren()) return false;
    if (getMinChildAge()
        != other.getMinChildAge()) return false;
    if (getMaxChildAge()
        != other.getMaxChildAge()) return false;
    if (getMaxInfants()
        != other.getMaxInfants()) return false;
    if (getInfantsApplyToOccupancy()
        != other.getInfantsApplyToOccupancy()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + MIN_PAX_FIELD_NUMBER;
    hash = (53 * hash) + getMinPax();
    hash = (37 * hash) + MAX_PAX_FIELD_NUMBER;
    hash = (53 * hash) + getMaxPax();
    hash = (37 * hash) + MIN_ADULTS_FIELD_NUMBER;
    hash = (53 * hash) + getMinAdults();
    hash = (37 * hash) + MAX_ADULTS_FIELD_NUMBER;
    hash = (53 * hash) + getMaxAdults();
    hash = (37 * hash) + MIN_CHILDREN_FIELD_NUMBER;
    hash = (53 * hash) + getMinChildren();
    hash = (37 * hash) + MAX_CHILDREN_FIELD_NUMBER;
    hash = (53 * hash) + getMaxChildren();
    hash = (37 * hash) + MIN_CHILD_AGE_FIELD_NUMBER;
    hash = (53 * hash) + getMinChildAge();
    hash = (37 * hash) + MAX_CHILD_AGE_FIELD_NUMBER;
    hash = (53 * hash) + getMaxChildAge();
    hash = (37 * hash) + MAX_INFANTS_FIELD_NUMBER;
    hash = (53 * hash) + getMaxInfants();
    hash = (37 * hash) + INFANTS_APPLY_TO_OCCUPANCY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getInfantsApplyToOccupancy());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Occupancy parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.peakwork.api.accommodation.v1.basedata.Occupancy prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Represents an occupancy, i.e. a set of possible combinations of persons (pax) in a travel. An occupancy distinguishes
   * between three types of persons: adults, children and infants. To which type a person is assigned is determined by the
   * persons's age (see min_child_age and max_child_age).
   * The set of possible combinations of persons allowed by an occupancy is determined by a set of restrictions on the
   * counts of persons per person type as well as the overall person count. If a combination of persons meets all of these
   * restrictions, this combination is included in the set of possible person combinations, that the occupancy defines.
   * </pre>
   *
   * Protobuf type {@code peakwork.api.accommodation.v1.basedata.Occupancy}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:peakwork.api.accommodation.v1.basedata.Occupancy)
      com.peakwork.api.accommodation.v1.basedata.OccupancyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Occupancy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Occupancy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.peakwork.api.accommodation.v1.basedata.Occupancy.class, com.peakwork.api.accommodation.v1.basedata.Occupancy.Builder.class);
    }

    // Construct using com.peakwork.api.accommodation.v1.basedata.Occupancy.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      minPax_ = 0;

      maxPax_ = 0;

      minAdults_ = 0;

      maxAdults_ = 0;

      minChildren_ = 0;

      maxChildren_ = 0;

      minChildAge_ = 0;

      maxChildAge_ = 0;

      maxInfants_ = 0;

      infantsApplyToOccupancy_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Occupancy_descriptor;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.basedata.Occupancy getDefaultInstanceForType() {
      return com.peakwork.api.accommodation.v1.basedata.Occupancy.getDefaultInstance();
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.basedata.Occupancy build() {
      com.peakwork.api.accommodation.v1.basedata.Occupancy result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.basedata.Occupancy buildPartial() {
      com.peakwork.api.accommodation.v1.basedata.Occupancy result = new com.peakwork.api.accommodation.v1.basedata.Occupancy(this);
      result.minPax_ = minPax_;
      result.maxPax_ = maxPax_;
      result.minAdults_ = minAdults_;
      result.maxAdults_ = maxAdults_;
      result.minChildren_ = minChildren_;
      result.maxChildren_ = maxChildren_;
      result.minChildAge_ = minChildAge_;
      result.maxChildAge_ = maxChildAge_;
      result.maxInfants_ = maxInfants_;
      result.infantsApplyToOccupancy_ = infantsApplyToOccupancy_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.peakwork.api.accommodation.v1.basedata.Occupancy) {
        return mergeFrom((com.peakwork.api.accommodation.v1.basedata.Occupancy)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.peakwork.api.accommodation.v1.basedata.Occupancy other) {
      if (other == com.peakwork.api.accommodation.v1.basedata.Occupancy.getDefaultInstance()) return this;
      if (other.getMinPax() != 0) {
        setMinPax(other.getMinPax());
      }
      if (other.getMaxPax() != 0) {
        setMaxPax(other.getMaxPax());
      }
      if (other.getMinAdults() != 0) {
        setMinAdults(other.getMinAdults());
      }
      if (other.getMaxAdults() != 0) {
        setMaxAdults(other.getMaxAdults());
      }
      if (other.getMinChildren() != 0) {
        setMinChildren(other.getMinChildren());
      }
      if (other.getMaxChildren() != 0) {
        setMaxChildren(other.getMaxChildren());
      }
      if (other.getMinChildAge() != 0) {
        setMinChildAge(other.getMinChildAge());
      }
      if (other.getMaxChildAge() != 0) {
        setMaxChildAge(other.getMaxChildAge());
      }
      if (other.getMaxInfants() != 0) {
        setMaxInfants(other.getMaxInfants());
      }
      if (other.getInfantsApplyToOccupancy() != false) {
        setInfantsApplyToOccupancy(other.getInfantsApplyToOccupancy());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.peakwork.api.accommodation.v1.basedata.Occupancy parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.peakwork.api.accommodation.v1.basedata.Occupancy) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int minPax_ ;
    /**
     * <pre>
     * optional - default: 1 - Minimum number of persons allowed in total. Must be greater than or equal to 1.
     * </pre>
     *
     * <code>int32 min_pax = 1;</code>
     */
    public int getMinPax() {
      return minPax_;
    }
    /**
     * <pre>
     * optional - default: 1 - Minimum number of persons allowed in total. Must be greater than or equal to 1.
     * </pre>
     *
     * <code>int32 min_pax = 1;</code>
     */
    public Builder setMinPax(int value) {
      
      minPax_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - default: 1 - Minimum number of persons allowed in total. Must be greater than or equal to 1.
     * </pre>
     *
     * <code>int32 min_pax = 1;</code>
     */
    public Builder clearMinPax() {
      
      minPax_ = 0;
      onChanged();
      return this;
    }

    private int maxPax_ ;
    /**
     * <pre>
     * mandatory - Maximum number of persons allowed in total.
     * </pre>
     *
     * <code>int32 max_pax = 2;</code>
     */
    public int getMaxPax() {
      return maxPax_;
    }
    /**
     * <pre>
     * mandatory - Maximum number of persons allowed in total.
     * </pre>
     *
     * <code>int32 max_pax = 2;</code>
     */
    public Builder setMaxPax(int value) {
      
      maxPax_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Maximum number of persons allowed in total.
     * </pre>
     *
     * <code>int32 max_pax = 2;</code>
     */
    public Builder clearMaxPax() {
      
      maxPax_ = 0;
      onChanged();
      return this;
    }

    private int minAdults_ ;
    /**
     * <pre>
     * optional - default: 1 - Minimum number of adults allowed. Must be greater than or equal to 1.
     * </pre>
     *
     * <code>int32 min_adults = 3;</code>
     */
    public int getMinAdults() {
      return minAdults_;
    }
    /**
     * <pre>
     * optional - default: 1 - Minimum number of adults allowed. Must be greater than or equal to 1.
     * </pre>
     *
     * <code>int32 min_adults = 3;</code>
     */
    public Builder setMinAdults(int value) {
      
      minAdults_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - default: 1 - Minimum number of adults allowed. Must be greater than or equal to 1.
     * </pre>
     *
     * <code>int32 min_adults = 3;</code>
     */
    public Builder clearMinAdults() {
      
      minAdults_ = 0;
      onChanged();
      return this;
    }

    private int maxAdults_ ;
    /**
     * <pre>
     * optional - Maximum number of adults allowed.
     * </pre>
     *
     * <code>int32 max_adults = 4;</code>
     */
    public int getMaxAdults() {
      return maxAdults_;
    }
    /**
     * <pre>
     * optional - Maximum number of adults allowed.
     * </pre>
     *
     * <code>int32 max_adults = 4;</code>
     */
    public Builder setMaxAdults(int value) {
      
      maxAdults_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - Maximum number of adults allowed.
     * </pre>
     *
     * <code>int32 max_adults = 4;</code>
     */
    public Builder clearMaxAdults() {
      
      maxAdults_ = 0;
      onChanged();
      return this;
    }

    private int minChildren_ ;
    /**
     * <pre>
     * optional - default: 0 - Minimum number of children allowed.
     * </pre>
     *
     * <code>int32 min_children = 5;</code>
     */
    public int getMinChildren() {
      return minChildren_;
    }
    /**
     * <pre>
     * optional - default: 0 - Minimum number of children allowed.
     * </pre>
     *
     * <code>int32 min_children = 5;</code>
     */
    public Builder setMinChildren(int value) {
      
      minChildren_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - default: 0 - Minimum number of children allowed.
     * </pre>
     *
     * <code>int32 min_children = 5;</code>
     */
    public Builder clearMinChildren() {
      
      minChildren_ = 0;
      onChanged();
      return this;
    }

    private int maxChildren_ ;
    /**
     * <pre>
     * optional - default: 0 - Maximum number of children allowed.
     * </pre>
     *
     * <code>int32 max_children = 6;</code>
     */
    public int getMaxChildren() {
      return maxChildren_;
    }
    /**
     * <pre>
     * optional - default: 0 - Maximum number of children allowed.
     * </pre>
     *
     * <code>int32 max_children = 6;</code>
     */
    public Builder setMaxChildren(int value) {
      
      maxChildren_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - default: 0 - Maximum number of children allowed.
     * </pre>
     *
     * <code>int32 max_children = 6;</code>
     */
    public Builder clearMaxChildren() {
      
      maxChildren_ = 0;
      onChanged();
      return this;
    }

    private int minChildAge_ ;
    /**
     * <pre>
     * optional - default: 2 - Minimum age in years, where a person is considered a child (inclusive). Persons younger
     * than this age are considered infants. Persons older than this age are considered either children or adults,
     * depending on max_child_age.
     * </pre>
     *
     * <code>int32 min_child_age = 7;</code>
     */
    public int getMinChildAge() {
      return minChildAge_;
    }
    /**
     * <pre>
     * optional - default: 2 - Minimum age in years, where a person is considered a child (inclusive). Persons younger
     * than this age are considered infants. Persons older than this age are considered either children or adults,
     * depending on max_child_age.
     * </pre>
     *
     * <code>int32 min_child_age = 7;</code>
     */
    public Builder setMinChildAge(int value) {
      
      minChildAge_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - default: 2 - Minimum age in years, where a person is considered a child (inclusive). Persons younger
     * than this age are considered infants. Persons older than this age are considered either children or adults,
     * depending on max_child_age.
     * </pre>
     *
     * <code>int32 min_child_age = 7;</code>
     */
    public Builder clearMinChildAge() {
      
      minChildAge_ = 0;
      onChanged();
      return this;
    }

    private int maxChildAge_ ;
    /**
     * <pre>
     * optional - default: 17 - Maximum age in years, where a person is considered a child (inclusive). Persons older than
     * this age are considered adults. Persons younger than this age are considered either children or infants, depending
     * on min_child_age.
     * </pre>
     *
     * <code>int32 max_child_age = 8;</code>
     */
    public int getMaxChildAge() {
      return maxChildAge_;
    }
    /**
     * <pre>
     * optional - default: 17 - Maximum age in years, where a person is considered a child (inclusive). Persons older than
     * this age are considered adults. Persons younger than this age are considered either children or infants, depending
     * on min_child_age.
     * </pre>
     *
     * <code>int32 max_child_age = 8;</code>
     */
    public Builder setMaxChildAge(int value) {
      
      maxChildAge_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - default: 17 - Maximum age in years, where a person is considered a child (inclusive). Persons older than
     * this age are considered adults. Persons younger than this age are considered either children or infants, depending
     * on min_child_age.
     * </pre>
     *
     * <code>int32 max_child_age = 8;</code>
     */
    public Builder clearMaxChildAge() {
      
      maxChildAge_ = 0;
      onChanged();
      return this;
    }

    private int maxInfants_ ;
    /**
     * <pre>
     * optional - Maximum number of infants allowed. If not given, no maximum restrictions towards infants apply.
     * </pre>
     *
     * <code>int32 max_infants = 9;</code>
     */
    public int getMaxInfants() {
      return maxInfants_;
    }
    /**
     * <pre>
     * optional - Maximum number of infants allowed. If not given, no maximum restrictions towards infants apply.
     * </pre>
     *
     * <code>int32 max_infants = 9;</code>
     */
    public Builder setMaxInfants(int value) {
      
      maxInfants_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - Maximum number of infants allowed. If not given, no maximum restrictions towards infants apply.
     * </pre>
     *
     * <code>int32 max_infants = 9;</code>
     */
    public Builder clearMaxInfants() {
      
      maxInfants_ = 0;
      onChanged();
      return this;
    }

    private boolean infantsApplyToOccupancy_ ;
    /**
     * <pre>
     * optional - default: false - Defines whether or not infants are counted towards the total pax restrictions (min_pax
     * and max_pax). If true, infants count towards the total pax count, i.e. the total pax count including infants
     * cannot exceed the max_pax restrictions and the min_pax restriction can be met by infants. If false, infants do not
     * count towards the total pax count, i.e. the total pax count including infants may exceed max_pax and infants do not
     * count towards min_pax.
     * </pre>
     *
     * <code>bool infants_apply_to_occupancy = 10;</code>
     */
    public boolean getInfantsApplyToOccupancy() {
      return infantsApplyToOccupancy_;
    }
    /**
     * <pre>
     * optional - default: false - Defines whether or not infants are counted towards the total pax restrictions (min_pax
     * and max_pax). If true, infants count towards the total pax count, i.e. the total pax count including infants
     * cannot exceed the max_pax restrictions and the min_pax restriction can be met by infants. If false, infants do not
     * count towards the total pax count, i.e. the total pax count including infants may exceed max_pax and infants do not
     * count towards min_pax.
     * </pre>
     *
     * <code>bool infants_apply_to_occupancy = 10;</code>
     */
    public Builder setInfantsApplyToOccupancy(boolean value) {
      
      infantsApplyToOccupancy_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - default: false - Defines whether or not infants are counted towards the total pax restrictions (min_pax
     * and max_pax). If true, infants count towards the total pax count, i.e. the total pax count including infants
     * cannot exceed the max_pax restrictions and the min_pax restriction can be met by infants. If false, infants do not
     * count towards the total pax count, i.e. the total pax count including infants may exceed max_pax and infants do not
     * count towards min_pax.
     * </pre>
     *
     * <code>bool infants_apply_to_occupancy = 10;</code>
     */
    public Builder clearInfantsApplyToOccupancy() {
      
      infantsApplyToOccupancy_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:peakwork.api.accommodation.v1.basedata.Occupancy)
  }

  // @@protoc_insertion_point(class_scope:peakwork.api.accommodation.v1.basedata.Occupancy)
  private static final com.peakwork.api.accommodation.v1.basedata.Occupancy DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.peakwork.api.accommodation.v1.basedata.Occupancy();
  }

  public static com.peakwork.api.accommodation.v1.basedata.Occupancy getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Occupancy>
      PARSER = new com.google.protobuf.AbstractParser<Occupancy>() {
    @java.lang.Override
    public Occupancy parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Occupancy(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Occupancy> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Occupancy> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.peakwork.api.accommodation.v1.basedata.Occupancy getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

