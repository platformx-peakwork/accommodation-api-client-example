// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basedata.proto

package com.peakwork.api.accommodation.v1.basedata;

/**
 * <pre>
 * Represents a room (or more precisely: a room type) of a supplier's accommodation portfolio and contains the meta
 * information of that room, e.g. to give out the the end customer.
 * A room entity does not necessarily correspond to an actual physical room. It is rather a category of physical rooms
 * determined by the supplier. Therefore, a room is a global object used by a supplier and not directly connected to an
 * accommodation, board or rate. The connection between rooms and other base entities is indirect and comes from offers.
 * Offers connect rooms with other entities like accommodations. That means, that for example a room is used only
 * in a single accommodation, if the relevant meta information of said room is specific to an accommodation, or it can
 * be used in multiple accommodations, if the meta information is independent of the accommodation (e.g. "a standard
 * double room"). A supplier may therefore categorize rooms by its own criteria.
 * </pre>
 *
 * Protobuf type {@code peakwork.api.accommodation.v1.basedata.Room}
 */
public  final class Room extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:peakwork.api.accommodation.v1.basedata.Room)
    RoomOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Room.newBuilder() to construct.
  private Room(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Room() {
    roomIdentifier_ = "";
    globalTypes_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Room(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            roomIdentifier_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              name_ = com.google.protobuf.MapField.newMapField(
                  NameDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000002;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
            name__ = input.readMessage(
                NameDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            name_.getMutableMap().put(
                name__.getKey(), name__.getValue());
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              globalTypes_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.common.GlobalType>();
              mutable_bitField0_ |= 0x00000004;
            }
            globalTypes_.add(
                input.readMessage(com.peakwork.api.accommodation.v1.common.GlobalType.parser(), extensionRegistry));
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              bookingPayload_ = com.google.protobuf.MapField.newMapField(
                  BookingPayloadDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000008;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
            bookingPayload__ = input.readMessage(
                BookingPayloadDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            bookingPayload_.getMutableMap().put(
                bookingPayload__.getKey(), bookingPayload__.getValue());
            break;
          }
          case 42: {
            com.peakwork.api.accommodation.v1.basedata.Occupancy.Builder subBuilder = null;
            if (occupancy_ != null) {
              subBuilder = occupancy_.toBuilder();
            }
            occupancy_ = input.readMessage(com.peakwork.api.accommodation.v1.basedata.Occupancy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(occupancy_);
              occupancy_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        globalTypes_ = java.util.Collections.unmodifiableList(globalTypes_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Room_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetName();
      case 4:
        return internalGetBookingPayload();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Room_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.peakwork.api.accommodation.v1.basedata.Room.class, com.peakwork.api.accommodation.v1.basedata.Room.Builder.class);
  }

  private int bitField0_;
  public static final int ROOM_IDENTIFIER_FIELD_NUMBER = 1;
  private volatile java.lang.Object roomIdentifier_;
  /**
   * <pre>
   * mandatory - Identifies a room within the scope of one supplier, i.e. it must be unique per supplier. A supplier
   * can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
   * room from the supplier's system has the same room_identifier, whenever it is referenced in the Accommodation API.
   * This is especially important, when updating rate data. Data of a rate with the same identifier will be replaced,
   * since they are considered to reference the same rate entity.
   * </pre>
   *
   * <code>string room_identifier = 1;</code>
   */
  public java.lang.String getRoomIdentifier() {
    java.lang.Object ref = roomIdentifier_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      roomIdentifier_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * mandatory - Identifies a room within the scope of one supplier, i.e. it must be unique per supplier. A supplier
   * can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
   * room from the supplier's system has the same room_identifier, whenever it is referenced in the Accommodation API.
   * This is especially important, when updating rate data. Data of a rate with the same identifier will be replaced,
   * since they are considered to reference the same rate entity.
   * </pre>
   *
   * <code>string room_identifier = 1;</code>
   */
  public com.google.protobuf.ByteString
      getRoomIdentifierBytes() {
    java.lang.Object ref = roomIdentifier_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      roomIdentifier_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int NAME_FIELD_NUMBER = 2;
  private static final class NameDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Room_NameEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> name_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetName() {
    if (name_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          NameDefaultEntryHolder.defaultEntry);
    }
    return name_;
  }

  public int getNameCount() {
    return internalGetName().getMap().size();
  }
  /**
   * <pre>
   * mandatory - The names of the room in multiple languages as a map. At least one name must be given.
   * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
   * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
   * - value (string): the name of the room in the corresponding language
   * </pre>
   *
   * <code>map&lt;string, string&gt; name = 2;</code>
   */

  public boolean containsName(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetName().getMap().containsKey(key);
  }
  /**
   * Use {@link #getNameMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getName() {
    return getNameMap();
  }
  /**
   * <pre>
   * mandatory - The names of the room in multiple languages as a map. At least one name must be given.
   * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
   * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
   * - value (string): the name of the room in the corresponding language
   * </pre>
   *
   * <code>map&lt;string, string&gt; name = 2;</code>
   */

  public java.util.Map<java.lang.String, java.lang.String> getNameMap() {
    return internalGetName().getMap();
  }
  /**
   * <pre>
   * mandatory - The names of the room in multiple languages as a map. At least one name must be given.
   * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
   * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
   * - value (string): the name of the room in the corresponding language
   * </pre>
   *
   * <code>map&lt;string, string&gt; name = 2;</code>
   */

  public java.lang.String getNameOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetName().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * mandatory - The names of the room in multiple languages as a map. At least one name must be given.
   * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
   * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
   * - value (string): the name of the room in the corresponding language
   * </pre>
   *
   * <code>map&lt;string, string&gt; name = 2;</code>
   */

  public java.lang.String getNameOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetName().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int GLOBAL_TYPES_FIELD_NUMBER = 3;
  private java.util.List<com.peakwork.api.accommodation.v1.common.GlobalType> globalTypes_;
  /**
   * <pre>
   * mandatory - List of DRV GlobalTypes giving meta information about the room.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
   */
  public java.util.List<com.peakwork.api.accommodation.v1.common.GlobalType> getGlobalTypesList() {
    return globalTypes_;
  }
  /**
   * <pre>
   * mandatory - List of DRV GlobalTypes giving meta information about the room.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
   */
  public java.util.List<? extends com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder> 
      getGlobalTypesOrBuilderList() {
    return globalTypes_;
  }
  /**
   * <pre>
   * mandatory - List of DRV GlobalTypes giving meta information about the room.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
   */
  public int getGlobalTypesCount() {
    return globalTypes_.size();
  }
  /**
   * <pre>
   * mandatory - List of DRV GlobalTypes giving meta information about the room.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
   */
  public com.peakwork.api.accommodation.v1.common.GlobalType getGlobalTypes(int index) {
    return globalTypes_.get(index);
  }
  /**
   * <pre>
   * mandatory - List of DRV GlobalTypes giving meta information about the room.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
   */
  public com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder getGlobalTypesOrBuilder(
      int index) {
    return globalTypes_.get(index);
  }

  public static final int BOOKING_PAYLOAD_FIELD_NUMBER = 4;
  private static final class BookingPayloadDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Room_BookingPayloadEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> bookingPayload_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetBookingPayload() {
    if (bookingPayload_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          BookingPayloadDefaultEntryHolder.defaultEntry);
    }
    return bookingPayload_;
  }

  public int getBookingPayloadCount() {
    return internalGetBookingPayload().getMap().size();
  }
  /**
   * <pre>
   * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
   * back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
   * correctly book the offer in its system.
   * </pre>
   *
   * <code>map&lt;string, string&gt; booking_payload = 4;</code>
   */

  public boolean containsBookingPayload(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetBookingPayload().getMap().containsKey(key);
  }
  /**
   * Use {@link #getBookingPayloadMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getBookingPayload() {
    return getBookingPayloadMap();
  }
  /**
   * <pre>
   * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
   * back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
   * correctly book the offer in its system.
   * </pre>
   *
   * <code>map&lt;string, string&gt; booking_payload = 4;</code>
   */

  public java.util.Map<java.lang.String, java.lang.String> getBookingPayloadMap() {
    return internalGetBookingPayload().getMap();
  }
  /**
   * <pre>
   * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
   * back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
   * correctly book the offer in its system.
   * </pre>
   *
   * <code>map&lt;string, string&gt; booking_payload = 4;</code>
   */

  public java.lang.String getBookingPayloadOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetBookingPayload().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
   * back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
   * correctly book the offer in its system.
   * </pre>
   *
   * <code>map&lt;string, string&gt; booking_payload = 4;</code>
   */

  public java.lang.String getBookingPayloadOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetBookingPayload().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int OCCUPANCY_FIELD_NUMBER = 5;
  private com.peakwork.api.accommodation.v1.basedata.Occupancy occupancy_;
  /**
   * <pre>
   * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
   * adults, children, infants).
   * An occupancy allows for multiple constellations of persons. But since an occupancy is
   * using count ranges of different person types to build a cross product of different counts of person types (see
   * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
   * occupancy.
   * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
   * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
   * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
   */
  public boolean hasOccupancy() {
    return occupancy_ != null;
  }
  /**
   * <pre>
   * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
   * adults, children, infants).
   * An occupancy allows for multiple constellations of persons. But since an occupancy is
   * using count ranges of different person types to build a cross product of different counts of person types (see
   * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
   * occupancy.
   * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
   * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
   * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
   */
  public com.peakwork.api.accommodation.v1.basedata.Occupancy getOccupancy() {
    return occupancy_ == null ? com.peakwork.api.accommodation.v1.basedata.Occupancy.getDefaultInstance() : occupancy_;
  }
  /**
   * <pre>
   * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
   * adults, children, infants).
   * An occupancy allows for multiple constellations of persons. But since an occupancy is
   * using count ranges of different person types to build a cross product of different counts of person types (see
   * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
   * occupancy.
   * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
   * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
   * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
   */
  public com.peakwork.api.accommodation.v1.basedata.OccupancyOrBuilder getOccupancyOrBuilder() {
    return getOccupancy();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getRoomIdentifierBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, roomIdentifier_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetName(),
        NameDefaultEntryHolder.defaultEntry,
        2);
    for (int i = 0; i < globalTypes_.size(); i++) {
      output.writeMessage(3, globalTypes_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetBookingPayload(),
        BookingPayloadDefaultEntryHolder.defaultEntry,
        4);
    if (occupancy_ != null) {
      output.writeMessage(5, getOccupancy());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getRoomIdentifierBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, roomIdentifier_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetName().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      name__ = NameDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, name__);
    }
    for (int i = 0; i < globalTypes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, globalTypes_.get(i));
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetBookingPayload().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      bookingPayload__ = BookingPayloadDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, bookingPayload__);
    }
    if (occupancy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getOccupancy());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.peakwork.api.accommodation.v1.basedata.Room)) {
      return super.equals(obj);
    }
    com.peakwork.api.accommodation.v1.basedata.Room other = (com.peakwork.api.accommodation.v1.basedata.Room) obj;

    if (!getRoomIdentifier()
        .equals(other.getRoomIdentifier())) return false;
    if (!internalGetName().equals(
        other.internalGetName())) return false;
    if (!getGlobalTypesList()
        .equals(other.getGlobalTypesList())) return false;
    if (!internalGetBookingPayload().equals(
        other.internalGetBookingPayload())) return false;
    if (hasOccupancy() != other.hasOccupancy()) return false;
    if (hasOccupancy()) {
      if (!getOccupancy()
          .equals(other.getOccupancy())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ROOM_IDENTIFIER_FIELD_NUMBER;
    hash = (53 * hash) + getRoomIdentifier().hashCode();
    if (!internalGetName().getMap().isEmpty()) {
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + internalGetName().hashCode();
    }
    if (getGlobalTypesCount() > 0) {
      hash = (37 * hash) + GLOBAL_TYPES_FIELD_NUMBER;
      hash = (53 * hash) + getGlobalTypesList().hashCode();
    }
    if (!internalGetBookingPayload().getMap().isEmpty()) {
      hash = (37 * hash) + BOOKING_PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + internalGetBookingPayload().hashCode();
    }
    if (hasOccupancy()) {
      hash = (37 * hash) + OCCUPANCY_FIELD_NUMBER;
      hash = (53 * hash) + getOccupancy().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.peakwork.api.accommodation.v1.basedata.Room parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Room parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Room parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Room parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Room parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Room parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Room parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Room parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Room parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Room parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Room parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.basedata.Room parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.peakwork.api.accommodation.v1.basedata.Room prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Represents a room (or more precisely: a room type) of a supplier's accommodation portfolio and contains the meta
   * information of that room, e.g. to give out the the end customer.
   * A room entity does not necessarily correspond to an actual physical room. It is rather a category of physical rooms
   * determined by the supplier. Therefore, a room is a global object used by a supplier and not directly connected to an
   * accommodation, board or rate. The connection between rooms and other base entities is indirect and comes from offers.
   * Offers connect rooms with other entities like accommodations. That means, that for example a room is used only
   * in a single accommodation, if the relevant meta information of said room is specific to an accommodation, or it can
   * be used in multiple accommodations, if the meta information is independent of the accommodation (e.g. "a standard
   * double room"). A supplier may therefore categorize rooms by its own criteria.
   * </pre>
   *
   * Protobuf type {@code peakwork.api.accommodation.v1.basedata.Room}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:peakwork.api.accommodation.v1.basedata.Room)
      com.peakwork.api.accommodation.v1.basedata.RoomOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Room_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetName();
        case 4:
          return internalGetBookingPayload();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableName();
        case 4:
          return internalGetMutableBookingPayload();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Room_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.peakwork.api.accommodation.v1.basedata.Room.class, com.peakwork.api.accommodation.v1.basedata.Room.Builder.class);
    }

    // Construct using com.peakwork.api.accommodation.v1.basedata.Room.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getGlobalTypesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      roomIdentifier_ = "";

      internalGetMutableName().clear();
      if (globalTypesBuilder_ == null) {
        globalTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        globalTypesBuilder_.clear();
      }
      internalGetMutableBookingPayload().clear();
      if (occupancyBuilder_ == null) {
        occupancy_ = null;
      } else {
        occupancy_ = null;
        occupancyBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.peakwork.api.accommodation.v1.basedata.Basedata.internal_static_peakwork_api_accommodation_v1_basedata_Room_descriptor;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.basedata.Room getDefaultInstanceForType() {
      return com.peakwork.api.accommodation.v1.basedata.Room.getDefaultInstance();
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.basedata.Room build() {
      com.peakwork.api.accommodation.v1.basedata.Room result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.basedata.Room buildPartial() {
      com.peakwork.api.accommodation.v1.basedata.Room result = new com.peakwork.api.accommodation.v1.basedata.Room(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.roomIdentifier_ = roomIdentifier_;
      result.name_ = internalGetName();
      result.name_.makeImmutable();
      if (globalTypesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          globalTypes_ = java.util.Collections.unmodifiableList(globalTypes_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.globalTypes_ = globalTypes_;
      } else {
        result.globalTypes_ = globalTypesBuilder_.build();
      }
      result.bookingPayload_ = internalGetBookingPayload();
      result.bookingPayload_.makeImmutable();
      if (occupancyBuilder_ == null) {
        result.occupancy_ = occupancy_;
      } else {
        result.occupancy_ = occupancyBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.peakwork.api.accommodation.v1.basedata.Room) {
        return mergeFrom((com.peakwork.api.accommodation.v1.basedata.Room)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.peakwork.api.accommodation.v1.basedata.Room other) {
      if (other == com.peakwork.api.accommodation.v1.basedata.Room.getDefaultInstance()) return this;
      if (!other.getRoomIdentifier().isEmpty()) {
        roomIdentifier_ = other.roomIdentifier_;
        onChanged();
      }
      internalGetMutableName().mergeFrom(
          other.internalGetName());
      if (globalTypesBuilder_ == null) {
        if (!other.globalTypes_.isEmpty()) {
          if (globalTypes_.isEmpty()) {
            globalTypes_ = other.globalTypes_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureGlobalTypesIsMutable();
            globalTypes_.addAll(other.globalTypes_);
          }
          onChanged();
        }
      } else {
        if (!other.globalTypes_.isEmpty()) {
          if (globalTypesBuilder_.isEmpty()) {
            globalTypesBuilder_.dispose();
            globalTypesBuilder_ = null;
            globalTypes_ = other.globalTypes_;
            bitField0_ = (bitField0_ & ~0x00000004);
            globalTypesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getGlobalTypesFieldBuilder() : null;
          } else {
            globalTypesBuilder_.addAllMessages(other.globalTypes_);
          }
        }
      }
      internalGetMutableBookingPayload().mergeFrom(
          other.internalGetBookingPayload());
      if (other.hasOccupancy()) {
        mergeOccupancy(other.getOccupancy());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.peakwork.api.accommodation.v1.basedata.Room parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.peakwork.api.accommodation.v1.basedata.Room) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object roomIdentifier_ = "";
    /**
     * <pre>
     * mandatory - Identifies a room within the scope of one supplier, i.e. it must be unique per supplier. A supplier
     * can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
     * room from the supplier's system has the same room_identifier, whenever it is referenced in the Accommodation API.
     * This is especially important, when updating rate data. Data of a rate with the same identifier will be replaced,
     * since they are considered to reference the same rate entity.
     * </pre>
     *
     * <code>string room_identifier = 1;</code>
     */
    public java.lang.String getRoomIdentifier() {
      java.lang.Object ref = roomIdentifier_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        roomIdentifier_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Identifies a room within the scope of one supplier, i.e. it must be unique per supplier. A supplier
     * can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
     * room from the supplier's system has the same room_identifier, whenever it is referenced in the Accommodation API.
     * This is especially important, when updating rate data. Data of a rate with the same identifier will be replaced,
     * since they are considered to reference the same rate entity.
     * </pre>
     *
     * <code>string room_identifier = 1;</code>
     */
    public com.google.protobuf.ByteString
        getRoomIdentifierBytes() {
      java.lang.Object ref = roomIdentifier_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        roomIdentifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Identifies a room within the scope of one supplier, i.e. it must be unique per supplier. A supplier
     * can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
     * room from the supplier's system has the same room_identifier, whenever it is referenced in the Accommodation API.
     * This is especially important, when updating rate data. Data of a rate with the same identifier will be replaced,
     * since they are considered to reference the same rate entity.
     * </pre>
     *
     * <code>string room_identifier = 1;</code>
     */
    public Builder setRoomIdentifier(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      roomIdentifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Identifies a room within the scope of one supplier, i.e. it must be unique per supplier. A supplier
     * can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
     * room from the supplier's system has the same room_identifier, whenever it is referenced in the Accommodation API.
     * This is especially important, when updating rate data. Data of a rate with the same identifier will be replaced,
     * since they are considered to reference the same rate entity.
     * </pre>
     *
     * <code>string room_identifier = 1;</code>
     */
    public Builder clearRoomIdentifier() {
      
      roomIdentifier_ = getDefaultInstance().getRoomIdentifier();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Identifies a room within the scope of one supplier, i.e. it must be unique per supplier. A supplier
     * can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
     * room from the supplier's system has the same room_identifier, whenever it is referenced in the Accommodation API.
     * This is especially important, when updating rate data. Data of a rate with the same identifier will be replaced,
     * since they are considered to reference the same rate entity.
     * </pre>
     *
     * <code>string room_identifier = 1;</code>
     */
    public Builder setRoomIdentifierBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      roomIdentifier_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> name_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetName() {
      if (name_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            NameDefaultEntryHolder.defaultEntry);
      }
      return name_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMutableName() {
      onChanged();;
      if (name_ == null) {
        name_ = com.google.protobuf.MapField.newMapField(
            NameDefaultEntryHolder.defaultEntry);
      }
      if (!name_.isMutable()) {
        name_ = name_.copy();
      }
      return name_;
    }

    public int getNameCount() {
      return internalGetName().getMap().size();
    }
    /**
     * <pre>
     * mandatory - The names of the room in multiple languages as a map. At least one name must be given.
     * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
     * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
     * - value (string): the name of the room in the corresponding language
     * </pre>
     *
     * <code>map&lt;string, string&gt; name = 2;</code>
     */

    public boolean containsName(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetName().getMap().containsKey(key);
    }
    /**
     * Use {@link #getNameMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getName() {
      return getNameMap();
    }
    /**
     * <pre>
     * mandatory - The names of the room in multiple languages as a map. At least one name must be given.
     * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
     * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
     * - value (string): the name of the room in the corresponding language
     * </pre>
     *
     * <code>map&lt;string, string&gt; name = 2;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getNameMap() {
      return internalGetName().getMap();
    }
    /**
     * <pre>
     * mandatory - The names of the room in multiple languages as a map. At least one name must be given.
     * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
     * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
     * - value (string): the name of the room in the corresponding language
     * </pre>
     *
     * <code>map&lt;string, string&gt; name = 2;</code>
     */

    public java.lang.String getNameOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetName().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * mandatory - The names of the room in multiple languages as a map. At least one name must be given.
     * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
     * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
     * - value (string): the name of the room in the corresponding language
     * </pre>
     *
     * <code>map&lt;string, string&gt; name = 2;</code>
     */

    public java.lang.String getNameOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetName().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearName() {
      internalGetMutableName().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * mandatory - The names of the room in multiple languages as a map. At least one name must be given.
     * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
     * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
     * - value (string): the name of the room in the corresponding language
     * </pre>
     *
     * <code>map&lt;string, string&gt; name = 2;</code>
     */

    public Builder removeName(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableName().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
    getMutableName() {
      return internalGetMutableName().getMutableMap();
    }
    /**
     * <pre>
     * mandatory - The names of the room in multiple languages as a map. At least one name must be given.
     * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
     * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
     * - value (string): the name of the room in the corresponding language
     * </pre>
     *
     * <code>map&lt;string, string&gt; name = 2;</code>
     */
    public Builder putName(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableName().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * mandatory - The names of the room in multiple languages as a map. At least one name must be given.
     * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
     * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
     * - value (string): the name of the room in the corresponding language
     * </pre>
     *
     * <code>map&lt;string, string&gt; name = 2;</code>
     */

    public Builder putAllName(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableName().getMutableMap()
          .putAll(values);
      return this;
    }

    private java.util.List<com.peakwork.api.accommodation.v1.common.GlobalType> globalTypes_ =
      java.util.Collections.emptyList();
    private void ensureGlobalTypesIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        globalTypes_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.common.GlobalType>(globalTypes_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.common.GlobalType, com.peakwork.api.accommodation.v1.common.GlobalType.Builder, com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder> globalTypesBuilder_;

    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.common.GlobalType> getGlobalTypesList() {
      if (globalTypesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(globalTypes_);
      } else {
        return globalTypesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public int getGlobalTypesCount() {
      if (globalTypesBuilder_ == null) {
        return globalTypes_.size();
      } else {
        return globalTypesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public com.peakwork.api.accommodation.v1.common.GlobalType getGlobalTypes(int index) {
      if (globalTypesBuilder_ == null) {
        return globalTypes_.get(index);
      } else {
        return globalTypesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public Builder setGlobalTypes(
        int index, com.peakwork.api.accommodation.v1.common.GlobalType value) {
      if (globalTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGlobalTypesIsMutable();
        globalTypes_.set(index, value);
        onChanged();
      } else {
        globalTypesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public Builder setGlobalTypes(
        int index, com.peakwork.api.accommodation.v1.common.GlobalType.Builder builderForValue) {
      if (globalTypesBuilder_ == null) {
        ensureGlobalTypesIsMutable();
        globalTypes_.set(index, builderForValue.build());
        onChanged();
      } else {
        globalTypesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public Builder addGlobalTypes(com.peakwork.api.accommodation.v1.common.GlobalType value) {
      if (globalTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGlobalTypesIsMutable();
        globalTypes_.add(value);
        onChanged();
      } else {
        globalTypesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public Builder addGlobalTypes(
        int index, com.peakwork.api.accommodation.v1.common.GlobalType value) {
      if (globalTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGlobalTypesIsMutable();
        globalTypes_.add(index, value);
        onChanged();
      } else {
        globalTypesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public Builder addGlobalTypes(
        com.peakwork.api.accommodation.v1.common.GlobalType.Builder builderForValue) {
      if (globalTypesBuilder_ == null) {
        ensureGlobalTypesIsMutable();
        globalTypes_.add(builderForValue.build());
        onChanged();
      } else {
        globalTypesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public Builder addGlobalTypes(
        int index, com.peakwork.api.accommodation.v1.common.GlobalType.Builder builderForValue) {
      if (globalTypesBuilder_ == null) {
        ensureGlobalTypesIsMutable();
        globalTypes_.add(index, builderForValue.build());
        onChanged();
      } else {
        globalTypesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public Builder addAllGlobalTypes(
        java.lang.Iterable<? extends com.peakwork.api.accommodation.v1.common.GlobalType> values) {
      if (globalTypesBuilder_ == null) {
        ensureGlobalTypesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, globalTypes_);
        onChanged();
      } else {
        globalTypesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public Builder clearGlobalTypes() {
      if (globalTypesBuilder_ == null) {
        globalTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        globalTypesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public Builder removeGlobalTypes(int index) {
      if (globalTypesBuilder_ == null) {
        ensureGlobalTypesIsMutable();
        globalTypes_.remove(index);
        onChanged();
      } else {
        globalTypesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public com.peakwork.api.accommodation.v1.common.GlobalType.Builder getGlobalTypesBuilder(
        int index) {
      return getGlobalTypesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder getGlobalTypesOrBuilder(
        int index) {
      if (globalTypesBuilder_ == null) {
        return globalTypes_.get(index);  } else {
        return globalTypesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public java.util.List<? extends com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder> 
         getGlobalTypesOrBuilderList() {
      if (globalTypesBuilder_ != null) {
        return globalTypesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(globalTypes_);
      }
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public com.peakwork.api.accommodation.v1.common.GlobalType.Builder addGlobalTypesBuilder() {
      return getGlobalTypesFieldBuilder().addBuilder(
          com.peakwork.api.accommodation.v1.common.GlobalType.getDefaultInstance());
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public com.peakwork.api.accommodation.v1.common.GlobalType.Builder addGlobalTypesBuilder(
        int index) {
      return getGlobalTypesFieldBuilder().addBuilder(
          index, com.peakwork.api.accommodation.v1.common.GlobalType.getDefaultInstance());
    }
    /**
     * <pre>
     * mandatory - List of DRV GlobalTypes giving meta information about the room.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 3;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.common.GlobalType.Builder> 
         getGlobalTypesBuilderList() {
      return getGlobalTypesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.common.GlobalType, com.peakwork.api.accommodation.v1.common.GlobalType.Builder, com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder> 
        getGlobalTypesFieldBuilder() {
      if (globalTypesBuilder_ == null) {
        globalTypesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.peakwork.api.accommodation.v1.common.GlobalType, com.peakwork.api.accommodation.v1.common.GlobalType.Builder, com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder>(
                globalTypes_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        globalTypes_ = null;
      }
      return globalTypesBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> bookingPayload_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetBookingPayload() {
      if (bookingPayload_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            BookingPayloadDefaultEntryHolder.defaultEntry);
      }
      return bookingPayload_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMutableBookingPayload() {
      onChanged();;
      if (bookingPayload_ == null) {
        bookingPayload_ = com.google.protobuf.MapField.newMapField(
            BookingPayloadDefaultEntryHolder.defaultEntry);
      }
      if (!bookingPayload_.isMutable()) {
        bookingPayload_ = bookingPayload_.copy();
      }
      return bookingPayload_;
    }

    public int getBookingPayloadCount() {
      return internalGetBookingPayload().getMap().size();
    }
    /**
     * <pre>
     * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
     * back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
     * correctly book the offer in its system.
     * </pre>
     *
     * <code>map&lt;string, string&gt; booking_payload = 4;</code>
     */

    public boolean containsBookingPayload(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetBookingPayload().getMap().containsKey(key);
    }
    /**
     * Use {@link #getBookingPayloadMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getBookingPayload() {
      return getBookingPayloadMap();
    }
    /**
     * <pre>
     * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
     * back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
     * correctly book the offer in its system.
     * </pre>
     *
     * <code>map&lt;string, string&gt; booking_payload = 4;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getBookingPayloadMap() {
      return internalGetBookingPayload().getMap();
    }
    /**
     * <pre>
     * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
     * back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
     * correctly book the offer in its system.
     * </pre>
     *
     * <code>map&lt;string, string&gt; booking_payload = 4;</code>
     */

    public java.lang.String getBookingPayloadOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetBookingPayload().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
     * back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
     * correctly book the offer in its system.
     * </pre>
     *
     * <code>map&lt;string, string&gt; booking_payload = 4;</code>
     */

    public java.lang.String getBookingPayloadOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetBookingPayload().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearBookingPayload() {
      internalGetMutableBookingPayload().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
     * back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
     * correctly book the offer in its system.
     * </pre>
     *
     * <code>map&lt;string, string&gt; booking_payload = 4;</code>
     */

    public Builder removeBookingPayload(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableBookingPayload().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
    getMutableBookingPayload() {
      return internalGetMutableBookingPayload().getMutableMap();
    }
    /**
     * <pre>
     * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
     * back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
     * correctly book the offer in its system.
     * </pre>
     *
     * <code>map&lt;string, string&gt; booking_payload = 4;</code>
     */
    public Builder putBookingPayload(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableBookingPayload().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
     * back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
     * correctly book the offer in its system.
     * </pre>
     *
     * <code>map&lt;string, string&gt; booking_payload = 4;</code>
     */

    public Builder putAllBookingPayload(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableBookingPayload().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.peakwork.api.accommodation.v1.basedata.Occupancy occupancy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.peakwork.api.accommodation.v1.basedata.Occupancy, com.peakwork.api.accommodation.v1.basedata.Occupancy.Builder, com.peakwork.api.accommodation.v1.basedata.OccupancyOrBuilder> occupancyBuilder_;
    /**
     * <pre>
     * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
     * adults, children, infants).
     * An occupancy allows for multiple constellations of persons. But since an occupancy is
     * using count ranges of different person types to build a cross product of different counts of person types (see
     * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
     * occupancy.
     * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
     * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
     * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
     * </pre>
     *
     * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
     */
    public boolean hasOccupancy() {
      return occupancyBuilder_ != null || occupancy_ != null;
    }
    /**
     * <pre>
     * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
     * adults, children, infants).
     * An occupancy allows for multiple constellations of persons. But since an occupancy is
     * using count ranges of different person types to build a cross product of different counts of person types (see
     * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
     * occupancy.
     * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
     * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
     * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
     * </pre>
     *
     * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
     */
    public com.peakwork.api.accommodation.v1.basedata.Occupancy getOccupancy() {
      if (occupancyBuilder_ == null) {
        return occupancy_ == null ? com.peakwork.api.accommodation.v1.basedata.Occupancy.getDefaultInstance() : occupancy_;
      } else {
        return occupancyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
     * adults, children, infants).
     * An occupancy allows for multiple constellations of persons. But since an occupancy is
     * using count ranges of different person types to build a cross product of different counts of person types (see
     * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
     * occupancy.
     * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
     * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
     * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
     * </pre>
     *
     * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
     */
    public Builder setOccupancy(com.peakwork.api.accommodation.v1.basedata.Occupancy value) {
      if (occupancyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        occupancy_ = value;
        onChanged();
      } else {
        occupancyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
     * adults, children, infants).
     * An occupancy allows for multiple constellations of persons. But since an occupancy is
     * using count ranges of different person types to build a cross product of different counts of person types (see
     * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
     * occupancy.
     * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
     * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
     * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
     * </pre>
     *
     * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
     */
    public Builder setOccupancy(
        com.peakwork.api.accommodation.v1.basedata.Occupancy.Builder builderForValue) {
      if (occupancyBuilder_ == null) {
        occupancy_ = builderForValue.build();
        onChanged();
      } else {
        occupancyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
     * adults, children, infants).
     * An occupancy allows for multiple constellations of persons. But since an occupancy is
     * using count ranges of different person types to build a cross product of different counts of person types (see
     * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
     * occupancy.
     * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
     * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
     * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
     * </pre>
     *
     * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
     */
    public Builder mergeOccupancy(com.peakwork.api.accommodation.v1.basedata.Occupancy value) {
      if (occupancyBuilder_ == null) {
        if (occupancy_ != null) {
          occupancy_ =
            com.peakwork.api.accommodation.v1.basedata.Occupancy.newBuilder(occupancy_).mergeFrom(value).buildPartial();
        } else {
          occupancy_ = value;
        }
        onChanged();
      } else {
        occupancyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
     * adults, children, infants).
     * An occupancy allows for multiple constellations of persons. But since an occupancy is
     * using count ranges of different person types to build a cross product of different counts of person types (see
     * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
     * occupancy.
     * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
     * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
     * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
     * </pre>
     *
     * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
     */
    public Builder clearOccupancy() {
      if (occupancyBuilder_ == null) {
        occupancy_ = null;
        onChanged();
      } else {
        occupancy_ = null;
        occupancyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
     * adults, children, infants).
     * An occupancy allows for multiple constellations of persons. But since an occupancy is
     * using count ranges of different person types to build a cross product of different counts of person types (see
     * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
     * occupancy.
     * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
     * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
     * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
     * </pre>
     *
     * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
     */
    public com.peakwork.api.accommodation.v1.basedata.Occupancy.Builder getOccupancyBuilder() {
      
      onChanged();
      return getOccupancyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
     * adults, children, infants).
     * An occupancy allows for multiple constellations of persons. But since an occupancy is
     * using count ranges of different person types to build a cross product of different counts of person types (see
     * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
     * occupancy.
     * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
     * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
     * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
     * </pre>
     *
     * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
     */
    public com.peakwork.api.accommodation.v1.basedata.OccupancyOrBuilder getOccupancyOrBuilder() {
      if (occupancyBuilder_ != null) {
        return occupancyBuilder_.getMessageOrBuilder();
      } else {
        return occupancy_ == null ?
            com.peakwork.api.accommodation.v1.basedata.Occupancy.getDefaultInstance() : occupancy_;
      }
    }
    /**
     * <pre>
     * mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
     * adults, children, infants).
     * An occupancy allows for multiple constellations of persons. But since an occupancy is
     * using count ranges of different person types to build a cross product of different counts of person types (see
     * Occupancy), it is not possible to express every theoretically possible set of person constellations with one
     * occupancy.
     * Example: only the following constellations are allowed: 1A+0C, 2A+1C =&gt; this constellation is not possible.
     * Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
     * with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
     * </pre>
     *
     * <code>.peakwork.api.accommodation.v1.basedata.Occupancy occupancy = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.peakwork.api.accommodation.v1.basedata.Occupancy, com.peakwork.api.accommodation.v1.basedata.Occupancy.Builder, com.peakwork.api.accommodation.v1.basedata.OccupancyOrBuilder> 
        getOccupancyFieldBuilder() {
      if (occupancyBuilder_ == null) {
        occupancyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.peakwork.api.accommodation.v1.basedata.Occupancy, com.peakwork.api.accommodation.v1.basedata.Occupancy.Builder, com.peakwork.api.accommodation.v1.basedata.OccupancyOrBuilder>(
                getOccupancy(),
                getParentForChildren(),
                isClean());
        occupancy_ = null;
      }
      return occupancyBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:peakwork.api.accommodation.v1.basedata.Room)
  }

  // @@protoc_insertion_point(class_scope:peakwork.api.accommodation.v1.basedata.Room)
  private static final com.peakwork.api.accommodation.v1.basedata.Room DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.peakwork.api.accommodation.v1.basedata.Room();
  }

  public static com.peakwork.api.accommodation.v1.basedata.Room getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Room>
      PARSER = new com.google.protobuf.AbstractParser<Room>() {
    @java.lang.Override
    public Room parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Room(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Room> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Room> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.peakwork.api.accommodation.v1.basedata.Room getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

