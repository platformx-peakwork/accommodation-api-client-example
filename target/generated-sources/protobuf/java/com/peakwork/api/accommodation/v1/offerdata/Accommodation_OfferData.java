// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offerdata.proto

package com.peakwork.api.accommodation.v1.offerdata;

/**
 * <pre>
 * Contains offer data for exactly one combination of an accommodation and a rate.
 * Keys: accommodation_identifier, rate_identifier(, split_identifier)
 * Values: currency, rooms, price_sets
 * Offer data information is given in rooms (Room_OfferData). The prices in rooms may reference data in price_sets.
 * price_sets is to be used as a lookup table for data in Room_OfferData and is intended for reuse within a
 * Room_OfferData and across different Room_OfferData elements for data size optimization.
 * </pre>
 *
 * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData}
 */
public  final class Accommodation_OfferData extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData)
    Accommodation_OfferDataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Accommodation_OfferData.newBuilder() to construct.
  private Accommodation_OfferData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Accommodation_OfferData() {
    accommodationIdentifier_ = "";
    rateIdentifier_ = "";
    currency_ = "";
    rooms_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Accommodation_OfferData(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            accommodationIdentifier_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            rateIdentifier_ = s;
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              splitIdentifier_ = com.google.protobuf.MapField.newMapField(
                  SplitIdentifierDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000004;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
            splitIdentifier__ = input.readMessage(
                SplitIdentifierDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            splitIdentifier_.getMutableMap().put(
                splitIdentifier__.getKey(), splitIdentifier__.getValue());
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            currency_ = s;
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              rooms_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.Room_OfferData>();
              mutable_bitField0_ |= 0x00000010;
            }
            rooms_.add(
                input.readMessage(com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.parser(), extensionRegistry));
            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000020) != 0)) {
              priceSets_ = com.google.protobuf.MapField.newMapField(
                  PriceSetsDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000020;
            }
            com.google.protobuf.MapEntry<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet>
            priceSets__ = input.readMessage(
                PriceSetsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            priceSets_.getMutableMap().put(
                priceSets__.getKey(), priceSets__.getValue());
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        rooms_ = java.util.Collections.unmodifiableList(rooms_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Accommodation_OfferData_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 3:
        return internalGetSplitIdentifier();
      case 6:
        return internalGetPriceSets();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Accommodation_OfferData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData.class, com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData.Builder.class);
  }

  private int bitField0_;
  public static final int ACCOMMODATION_IDENTIFIER_FIELD_NUMBER = 1;
  private volatile java.lang.Object accommodationIdentifier_;
  /**
   * <pre>
   * mandatory - Identifier for the accommodation used by the supplier. This identifier references an accommodation
   * entity (supplierAccommodationId) from the BaseDataService. See supplierAccommodationId of Accommodation.
   * The offer information of this payload is valid for the referenced accommodation only.
   * </pre>
   *
   * <code>string accommodation_identifier = 1;</code>
   */
  public java.lang.String getAccommodationIdentifier() {
    java.lang.Object ref = accommodationIdentifier_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      accommodationIdentifier_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * mandatory - Identifier for the accommodation used by the supplier. This identifier references an accommodation
   * entity (supplierAccommodationId) from the BaseDataService. See supplierAccommodationId of Accommodation.
   * The offer information of this payload is valid for the referenced accommodation only.
   * </pre>
   *
   * <code>string accommodation_identifier = 1;</code>
   */
  public com.google.protobuf.ByteString
      getAccommodationIdentifierBytes() {
    java.lang.Object ref = accommodationIdentifier_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      accommodationIdentifier_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RATE_IDENTIFIER_FIELD_NUMBER = 2;
  private volatile java.lang.Object rateIdentifier_;
  /**
   * <pre>
   * mandatory - Identifier for the rate used by the supplier. This identifier references a rate
   * entity (rateIdentifier) from the BaseDataService. See rateIdentifier of Rate.
   * The offer information of this payload is valid for the referenced rate only.
   * </pre>
   *
   * <code>string rate_identifier = 2;</code>
   */
  public java.lang.String getRateIdentifier() {
    java.lang.Object ref = rateIdentifier_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      rateIdentifier_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * mandatory - Identifier for the rate used by the supplier. This identifier references a rate
   * entity (rateIdentifier) from the BaseDataService. See rateIdentifier of Rate.
   * The offer information of this payload is valid for the referenced rate only.
   * </pre>
   *
   * <code>string rate_identifier = 2;</code>
   */
  public com.google.protobuf.ByteString
      getRateIdentifierBytes() {
    java.lang.Object ref = rateIdentifier_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      rateIdentifier_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SPLIT_IDENTIFIER_FIELD_NUMBER = 3;
  private static final class SplitIdentifierDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Accommodation_OfferData_SplitIdentifierEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> splitIdentifier_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetSplitIdentifier() {
    if (splitIdentifier_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          SplitIdentifierDefaultEntryHolder.defaultEntry);
    }
    return splitIdentifier_;
  }

  public int getSplitIdentifierCount() {
    return internalGetSplitIdentifier().getMap().size();
  }
  /**
   * <pre>
   * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
   * for technical reasons. Currently not implemented.
   * </pre>
   *
   * <code>map&lt;string, string&gt; split_identifier = 3;</code>
   */

  public boolean containsSplitIdentifier(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetSplitIdentifier().getMap().containsKey(key);
  }
  /**
   * Use {@link #getSplitIdentifierMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getSplitIdentifier() {
    return getSplitIdentifierMap();
  }
  /**
   * <pre>
   * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
   * for technical reasons. Currently not implemented.
   * </pre>
   *
   * <code>map&lt;string, string&gt; split_identifier = 3;</code>
   */

  public java.util.Map<java.lang.String, java.lang.String> getSplitIdentifierMap() {
    return internalGetSplitIdentifier().getMap();
  }
  /**
   * <pre>
   * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
   * for technical reasons. Currently not implemented.
   * </pre>
   *
   * <code>map&lt;string, string&gt; split_identifier = 3;</code>
   */

  public java.lang.String getSplitIdentifierOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetSplitIdentifier().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
   * for technical reasons. Currently not implemented.
   * </pre>
   *
   * <code>map&lt;string, string&gt; split_identifier = 3;</code>
   */

  public java.lang.String getSplitIdentifierOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetSplitIdentifier().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int CURRENCY_FIELD_NUMBER = 4;
  private volatile java.lang.Object currency_;
  /**
   * <pre>
   * mandatory - Denotes the currency of the offer prices in the given message. All prices in a single message, e.g. for
   * different rooms, boards or arrival dates, have the same currency. The currency is given as code in ISO 4217
   * standard.
   * </pre>
   *
   * <code>string currency = 4;</code>
   */
  public java.lang.String getCurrency() {
    java.lang.Object ref = currency_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      currency_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * mandatory - Denotes the currency of the offer prices in the given message. All prices in a single message, e.g. for
   * different rooms, boards or arrival dates, have the same currency. The currency is given as code in ISO 4217
   * standard.
   * </pre>
   *
   * <code>string currency = 4;</code>
   */
  public com.google.protobuf.ByteString
      getCurrencyBytes() {
    java.lang.Object ref = currency_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      currency_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ROOMS_FIELD_NUMBER = 5;
  private java.util.List<com.peakwork.api.accommodation.v1.offerdata.Room_OfferData> rooms_;
  /**
   * <pre>
   * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
   * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
   * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
   * accommodation and rate key combination).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
   */
  public java.util.List<com.peakwork.api.accommodation.v1.offerdata.Room_OfferData> getRoomsList() {
    return rooms_;
  }
  /**
   * <pre>
   * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
   * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
   * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
   * accommodation and rate key combination).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
   */
  public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.Room_OfferDataOrBuilder> 
      getRoomsOrBuilderList() {
    return rooms_;
  }
  /**
   * <pre>
   * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
   * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
   * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
   * accommodation and rate key combination).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
   */
  public int getRoomsCount() {
    return rooms_.size();
  }
  /**
   * <pre>
   * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
   * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
   * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
   * accommodation and rate key combination).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.Room_OfferData getRooms(int index) {
    return rooms_.get(index);
  }
  /**
   * <pre>
   * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
   * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
   * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
   * accommodation and rate key combination).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.Room_OfferDataOrBuilder getRoomsOrBuilder(
      int index) {
    return rooms_.get(index);
  }

  public static final int PRICE_SETS_FIELD_NUMBER = 6;
  private static final class PriceSetsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet>newDefaultInstance(
                com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Accommodation_OfferData_PriceSetsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.peakwork.api.accommodation.v1.offerdata.PriceSet.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> priceSets_;
  private com.google.protobuf.MapField<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet>
  internalGetPriceSets() {
    if (priceSets_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          PriceSetsDefaultEntryHolder.defaultEntry);
    }
    return priceSets_;
  }

  public int getPriceSetsCount() {
    return internalGetPriceSets().getMap().size();
  }
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
   * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
   * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
   * different message. It does not serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
   * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
   * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
   * consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
   */

  public boolean containsPriceSets(
      int key) {
    
    return internalGetPriceSets().getMap().containsKey(key);
  }
  /**
   * Use {@link #getPriceSetsMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> getPriceSets() {
    return getPriceSetsMap();
  }
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
   * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
   * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
   * different message. It does not serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
   * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
   * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
   * consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
   */

  public java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> getPriceSetsMap() {
    return internalGetPriceSets().getMap();
  }
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
   * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
   * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
   * different message. It does not serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
   * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
   * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
   * consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
   */

  public com.peakwork.api.accommodation.v1.offerdata.PriceSet getPriceSetsOrDefault(
      int key,
      com.peakwork.api.accommodation.v1.offerdata.PriceSet defaultValue) {
    
    java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> map =
        internalGetPriceSets().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
   * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
   * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
   * different message. It does not serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
   * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
   * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
   * consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
   */

  public com.peakwork.api.accommodation.v1.offerdata.PriceSet getPriceSetsOrThrow(
      int key) {
    
    java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> map =
        internalGetPriceSets().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getAccommodationIdentifierBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, accommodationIdentifier_);
    }
    if (!getRateIdentifierBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, rateIdentifier_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetSplitIdentifier(),
        SplitIdentifierDefaultEntryHolder.defaultEntry,
        3);
    if (!getCurrencyBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, currency_);
    }
    for (int i = 0; i < rooms_.size(); i++) {
      output.writeMessage(5, rooms_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeIntegerMapTo(
        output,
        internalGetPriceSets(),
        PriceSetsDefaultEntryHolder.defaultEntry,
        6);
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getAccommodationIdentifierBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, accommodationIdentifier_);
    }
    if (!getRateIdentifierBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, rateIdentifier_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetSplitIdentifier().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      splitIdentifier__ = SplitIdentifierDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, splitIdentifier__);
    }
    if (!getCurrencyBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, currency_);
    }
    for (int i = 0; i < rooms_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, rooms_.get(i));
    }
    for (java.util.Map.Entry<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> entry
         : internalGetPriceSets().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet>
      priceSets__ = PriceSetsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, priceSets__);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData)) {
      return super.equals(obj);
    }
    com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData other = (com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData) obj;

    if (!getAccommodationIdentifier()
        .equals(other.getAccommodationIdentifier())) return false;
    if (!getRateIdentifier()
        .equals(other.getRateIdentifier())) return false;
    if (!internalGetSplitIdentifier().equals(
        other.internalGetSplitIdentifier())) return false;
    if (!getCurrency()
        .equals(other.getCurrency())) return false;
    if (!getRoomsList()
        .equals(other.getRoomsList())) return false;
    if (!internalGetPriceSets().equals(
        other.internalGetPriceSets())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ACCOMMODATION_IDENTIFIER_FIELD_NUMBER;
    hash = (53 * hash) + getAccommodationIdentifier().hashCode();
    hash = (37 * hash) + RATE_IDENTIFIER_FIELD_NUMBER;
    hash = (53 * hash) + getRateIdentifier().hashCode();
    if (!internalGetSplitIdentifier().getMap().isEmpty()) {
      hash = (37 * hash) + SPLIT_IDENTIFIER_FIELD_NUMBER;
      hash = (53 * hash) + internalGetSplitIdentifier().hashCode();
    }
    hash = (37 * hash) + CURRENCY_FIELD_NUMBER;
    hash = (53 * hash) + getCurrency().hashCode();
    if (getRoomsCount() > 0) {
      hash = (37 * hash) + ROOMS_FIELD_NUMBER;
      hash = (53 * hash) + getRoomsList().hashCode();
    }
    if (!internalGetPriceSets().getMap().isEmpty()) {
      hash = (37 * hash) + PRICE_SETS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetPriceSets().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Contains offer data for exactly one combination of an accommodation and a rate.
   * Keys: accommodation_identifier, rate_identifier(, split_identifier)
   * Values: currency, rooms, price_sets
   * Offer data information is given in rooms (Room_OfferData). The prices in rooms may reference data in price_sets.
   * price_sets is to be used as a lookup table for data in Room_OfferData and is intended for reuse within a
   * Room_OfferData and across different Room_OfferData elements for data size optimization.
   * </pre>
   *
   * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData)
      com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Accommodation_OfferData_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetSplitIdentifier();
        case 6:
          return internalGetPriceSets();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetMutableSplitIdentifier();
        case 6:
          return internalGetMutablePriceSets();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Accommodation_OfferData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData.class, com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData.Builder.class);
    }

    // Construct using com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getRoomsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      accommodationIdentifier_ = "";

      rateIdentifier_ = "";

      internalGetMutableSplitIdentifier().clear();
      currency_ = "";

      if (roomsBuilder_ == null) {
        rooms_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
      } else {
        roomsBuilder_.clear();
      }
      internalGetMutablePriceSets().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Accommodation_OfferData_descriptor;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData getDefaultInstanceForType() {
      return com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData.getDefaultInstance();
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData build() {
      com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData buildPartial() {
      com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData result = new com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.accommodationIdentifier_ = accommodationIdentifier_;
      result.rateIdentifier_ = rateIdentifier_;
      result.splitIdentifier_ = internalGetSplitIdentifier();
      result.splitIdentifier_.makeImmutable();
      result.currency_ = currency_;
      if (roomsBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          rooms_ = java.util.Collections.unmodifiableList(rooms_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.rooms_ = rooms_;
      } else {
        result.rooms_ = roomsBuilder_.build();
      }
      result.priceSets_ = internalGetPriceSets();
      result.priceSets_.makeImmutable();
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData) {
        return mergeFrom((com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData other) {
      if (other == com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData.getDefaultInstance()) return this;
      if (!other.getAccommodationIdentifier().isEmpty()) {
        accommodationIdentifier_ = other.accommodationIdentifier_;
        onChanged();
      }
      if (!other.getRateIdentifier().isEmpty()) {
        rateIdentifier_ = other.rateIdentifier_;
        onChanged();
      }
      internalGetMutableSplitIdentifier().mergeFrom(
          other.internalGetSplitIdentifier());
      if (!other.getCurrency().isEmpty()) {
        currency_ = other.currency_;
        onChanged();
      }
      if (roomsBuilder_ == null) {
        if (!other.rooms_.isEmpty()) {
          if (rooms_.isEmpty()) {
            rooms_ = other.rooms_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureRoomsIsMutable();
            rooms_.addAll(other.rooms_);
          }
          onChanged();
        }
      } else {
        if (!other.rooms_.isEmpty()) {
          if (roomsBuilder_.isEmpty()) {
            roomsBuilder_.dispose();
            roomsBuilder_ = null;
            rooms_ = other.rooms_;
            bitField0_ = (bitField0_ & ~0x00000010);
            roomsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getRoomsFieldBuilder() : null;
          } else {
            roomsBuilder_.addAllMessages(other.rooms_);
          }
        }
      }
      internalGetMutablePriceSets().mergeFrom(
          other.internalGetPriceSets());
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object accommodationIdentifier_ = "";
    /**
     * <pre>
     * mandatory - Identifier for the accommodation used by the supplier. This identifier references an accommodation
     * entity (supplierAccommodationId) from the BaseDataService. See supplierAccommodationId of Accommodation.
     * The offer information of this payload is valid for the referenced accommodation only.
     * </pre>
     *
     * <code>string accommodation_identifier = 1;</code>
     */
    public java.lang.String getAccommodationIdentifier() {
      java.lang.Object ref = accommodationIdentifier_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        accommodationIdentifier_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Identifier for the accommodation used by the supplier. This identifier references an accommodation
     * entity (supplierAccommodationId) from the BaseDataService. See supplierAccommodationId of Accommodation.
     * The offer information of this payload is valid for the referenced accommodation only.
     * </pre>
     *
     * <code>string accommodation_identifier = 1;</code>
     */
    public com.google.protobuf.ByteString
        getAccommodationIdentifierBytes() {
      java.lang.Object ref = accommodationIdentifier_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        accommodationIdentifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Identifier for the accommodation used by the supplier. This identifier references an accommodation
     * entity (supplierAccommodationId) from the BaseDataService. See supplierAccommodationId of Accommodation.
     * The offer information of this payload is valid for the referenced accommodation only.
     * </pre>
     *
     * <code>string accommodation_identifier = 1;</code>
     */
    public Builder setAccommodationIdentifier(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      accommodationIdentifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Identifier for the accommodation used by the supplier. This identifier references an accommodation
     * entity (supplierAccommodationId) from the BaseDataService. See supplierAccommodationId of Accommodation.
     * The offer information of this payload is valid for the referenced accommodation only.
     * </pre>
     *
     * <code>string accommodation_identifier = 1;</code>
     */
    public Builder clearAccommodationIdentifier() {
      
      accommodationIdentifier_ = getDefaultInstance().getAccommodationIdentifier();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Identifier for the accommodation used by the supplier. This identifier references an accommodation
     * entity (supplierAccommodationId) from the BaseDataService. See supplierAccommodationId of Accommodation.
     * The offer information of this payload is valid for the referenced accommodation only.
     * </pre>
     *
     * <code>string accommodation_identifier = 1;</code>
     */
    public Builder setAccommodationIdentifierBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      accommodationIdentifier_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object rateIdentifier_ = "";
    /**
     * <pre>
     * mandatory - Identifier for the rate used by the supplier. This identifier references a rate
     * entity (rateIdentifier) from the BaseDataService. See rateIdentifier of Rate.
     * The offer information of this payload is valid for the referenced rate only.
     * </pre>
     *
     * <code>string rate_identifier = 2;</code>
     */
    public java.lang.String getRateIdentifier() {
      java.lang.Object ref = rateIdentifier_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        rateIdentifier_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Identifier for the rate used by the supplier. This identifier references a rate
     * entity (rateIdentifier) from the BaseDataService. See rateIdentifier of Rate.
     * The offer information of this payload is valid for the referenced rate only.
     * </pre>
     *
     * <code>string rate_identifier = 2;</code>
     */
    public com.google.protobuf.ByteString
        getRateIdentifierBytes() {
      java.lang.Object ref = rateIdentifier_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        rateIdentifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Identifier for the rate used by the supplier. This identifier references a rate
     * entity (rateIdentifier) from the BaseDataService. See rateIdentifier of Rate.
     * The offer information of this payload is valid for the referenced rate only.
     * </pre>
     *
     * <code>string rate_identifier = 2;</code>
     */
    public Builder setRateIdentifier(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      rateIdentifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Identifier for the rate used by the supplier. This identifier references a rate
     * entity (rateIdentifier) from the BaseDataService. See rateIdentifier of Rate.
     * The offer information of this payload is valid for the referenced rate only.
     * </pre>
     *
     * <code>string rate_identifier = 2;</code>
     */
    public Builder clearRateIdentifier() {
      
      rateIdentifier_ = getDefaultInstance().getRateIdentifier();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Identifier for the rate used by the supplier. This identifier references a rate
     * entity (rateIdentifier) from the BaseDataService. See rateIdentifier of Rate.
     * The offer information of this payload is valid for the referenced rate only.
     * </pre>
     *
     * <code>string rate_identifier = 2;</code>
     */
    public Builder setRateIdentifierBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      rateIdentifier_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> splitIdentifier_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetSplitIdentifier() {
      if (splitIdentifier_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            SplitIdentifierDefaultEntryHolder.defaultEntry);
      }
      return splitIdentifier_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMutableSplitIdentifier() {
      onChanged();;
      if (splitIdentifier_ == null) {
        splitIdentifier_ = com.google.protobuf.MapField.newMapField(
            SplitIdentifierDefaultEntryHolder.defaultEntry);
      }
      if (!splitIdentifier_.isMutable()) {
        splitIdentifier_ = splitIdentifier_.copy();
      }
      return splitIdentifier_;
    }

    public int getSplitIdentifierCount() {
      return internalGetSplitIdentifier().getMap().size();
    }
    /**
     * <pre>
     * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
     * for technical reasons. Currently not implemented.
     * </pre>
     *
     * <code>map&lt;string, string&gt; split_identifier = 3;</code>
     */

    public boolean containsSplitIdentifier(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetSplitIdentifier().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSplitIdentifierMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getSplitIdentifier() {
      return getSplitIdentifierMap();
    }
    /**
     * <pre>
     * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
     * for technical reasons. Currently not implemented.
     * </pre>
     *
     * <code>map&lt;string, string&gt; split_identifier = 3;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getSplitIdentifierMap() {
      return internalGetSplitIdentifier().getMap();
    }
    /**
     * <pre>
     * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
     * for technical reasons. Currently not implemented.
     * </pre>
     *
     * <code>map&lt;string, string&gt; split_identifier = 3;</code>
     */

    public java.lang.String getSplitIdentifierOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetSplitIdentifier().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
     * for technical reasons. Currently not implemented.
     * </pre>
     *
     * <code>map&lt;string, string&gt; split_identifier = 3;</code>
     */

    public java.lang.String getSplitIdentifierOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetSplitIdentifier().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearSplitIdentifier() {
      internalGetMutableSplitIdentifier().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
     * for technical reasons. Currently not implemented.
     * </pre>
     *
     * <code>map&lt;string, string&gt; split_identifier = 3;</code>
     */

    public Builder removeSplitIdentifier(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableSplitIdentifier().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
    getMutableSplitIdentifier() {
      return internalGetMutableSplitIdentifier().getMutableMap();
    }
    /**
     * <pre>
     * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
     * for technical reasons. Currently not implemented.
     * </pre>
     *
     * <code>map&lt;string, string&gt; split_identifier = 3;</code>
     */
    public Builder putSplitIdentifier(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableSplitIdentifier().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
     * for technical reasons. Currently not implemented.
     * </pre>
     *
     * <code>map&lt;string, string&gt; split_identifier = 3;</code>
     */

    public Builder putAllSplitIdentifier(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableSplitIdentifier().getMutableMap()
          .putAll(values);
      return this;
    }

    private java.lang.Object currency_ = "";
    /**
     * <pre>
     * mandatory - Denotes the currency of the offer prices in the given message. All prices in a single message, e.g. for
     * different rooms, boards or arrival dates, have the same currency. The currency is given as code in ISO 4217
     * standard.
     * </pre>
     *
     * <code>string currency = 4;</code>
     */
    public java.lang.String getCurrency() {
      java.lang.Object ref = currency_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        currency_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Denotes the currency of the offer prices in the given message. All prices in a single message, e.g. for
     * different rooms, boards or arrival dates, have the same currency. The currency is given as code in ISO 4217
     * standard.
     * </pre>
     *
     * <code>string currency = 4;</code>
     */
    public com.google.protobuf.ByteString
        getCurrencyBytes() {
      java.lang.Object ref = currency_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        currency_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Denotes the currency of the offer prices in the given message. All prices in a single message, e.g. for
     * different rooms, boards or arrival dates, have the same currency. The currency is given as code in ISO 4217
     * standard.
     * </pre>
     *
     * <code>string currency = 4;</code>
     */
    public Builder setCurrency(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      currency_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Denotes the currency of the offer prices in the given message. All prices in a single message, e.g. for
     * different rooms, boards or arrival dates, have the same currency. The currency is given as code in ISO 4217
     * standard.
     * </pre>
     *
     * <code>string currency = 4;</code>
     */
    public Builder clearCurrency() {
      
      currency_ = getDefaultInstance().getCurrency();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Denotes the currency of the offer prices in the given message. All prices in a single message, e.g. for
     * different rooms, boards or arrival dates, have the same currency. The currency is given as code in ISO 4217
     * standard.
     * </pre>
     *
     * <code>string currency = 4;</code>
     */
    public Builder setCurrencyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      currency_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.peakwork.api.accommodation.v1.offerdata.Room_OfferData> rooms_ =
      java.util.Collections.emptyList();
    private void ensureRoomsIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        rooms_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.Room_OfferData>(rooms_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.Room_OfferData, com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder, com.peakwork.api.accommodation.v1.offerdata.Room_OfferDataOrBuilder> roomsBuilder_;

    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.Room_OfferData> getRoomsList() {
      if (roomsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(rooms_);
      } else {
        return roomsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public int getRoomsCount() {
      if (roomsBuilder_ == null) {
        return rooms_.size();
      } else {
        return roomsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.Room_OfferData getRooms(int index) {
      if (roomsBuilder_ == null) {
        return rooms_.get(index);
      } else {
        return roomsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public Builder setRooms(
        int index, com.peakwork.api.accommodation.v1.offerdata.Room_OfferData value) {
      if (roomsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRoomsIsMutable();
        rooms_.set(index, value);
        onChanged();
      } else {
        roomsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public Builder setRooms(
        int index, com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder builderForValue) {
      if (roomsBuilder_ == null) {
        ensureRoomsIsMutable();
        rooms_.set(index, builderForValue.build());
        onChanged();
      } else {
        roomsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public Builder addRooms(com.peakwork.api.accommodation.v1.offerdata.Room_OfferData value) {
      if (roomsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRoomsIsMutable();
        rooms_.add(value);
        onChanged();
      } else {
        roomsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public Builder addRooms(
        int index, com.peakwork.api.accommodation.v1.offerdata.Room_OfferData value) {
      if (roomsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRoomsIsMutable();
        rooms_.add(index, value);
        onChanged();
      } else {
        roomsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public Builder addRooms(
        com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder builderForValue) {
      if (roomsBuilder_ == null) {
        ensureRoomsIsMutable();
        rooms_.add(builderForValue.build());
        onChanged();
      } else {
        roomsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public Builder addRooms(
        int index, com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder builderForValue) {
      if (roomsBuilder_ == null) {
        ensureRoomsIsMutable();
        rooms_.add(index, builderForValue.build());
        onChanged();
      } else {
        roomsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public Builder addAllRooms(
        java.lang.Iterable<? extends com.peakwork.api.accommodation.v1.offerdata.Room_OfferData> values) {
      if (roomsBuilder_ == null) {
        ensureRoomsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, rooms_);
        onChanged();
      } else {
        roomsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public Builder clearRooms() {
      if (roomsBuilder_ == null) {
        rooms_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        roomsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public Builder removeRooms(int index) {
      if (roomsBuilder_ == null) {
        ensureRoomsIsMutable();
        rooms_.remove(index);
        onChanged();
      } else {
        roomsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder getRoomsBuilder(
        int index) {
      return getRoomsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.Room_OfferDataOrBuilder getRoomsOrBuilder(
        int index) {
      if (roomsBuilder_ == null) {
        return rooms_.get(index);  } else {
        return roomsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.Room_OfferDataOrBuilder> 
         getRoomsOrBuilderList() {
      if (roomsBuilder_ != null) {
        return roomsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(rooms_);
      }
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder addRoomsBuilder() {
      return getRoomsFieldBuilder().addBuilder(
          com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.getDefaultInstance());
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder addRoomsBuilder(
        int index) {
      return getRoomsFieldBuilder().addBuilder(
          index, com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.getDefaultInstance());
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
     * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
     * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
     * accommodation and rate key combination).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder> 
         getRoomsBuilderList() {
      return getRoomsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.Room_OfferData, com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder, com.peakwork.api.accommodation.v1.offerdata.Room_OfferDataOrBuilder> 
        getRoomsFieldBuilder() {
      if (roomsBuilder_ == null) {
        roomsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.peakwork.api.accommodation.v1.offerdata.Room_OfferData, com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder, com.peakwork.api.accommodation.v1.offerdata.Room_OfferDataOrBuilder>(
                rooms_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        rooms_ = null;
      }
      return roomsBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> priceSets_;
    private com.google.protobuf.MapField<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet>
    internalGetPriceSets() {
      if (priceSets_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            PriceSetsDefaultEntryHolder.defaultEntry);
      }
      return priceSets_;
    }
    private com.google.protobuf.MapField<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet>
    internalGetMutablePriceSets() {
      onChanged();;
      if (priceSets_ == null) {
        priceSets_ = com.google.protobuf.MapField.newMapField(
            PriceSetsDefaultEntryHolder.defaultEntry);
      }
      if (!priceSets_.isMutable()) {
        priceSets_ = priceSets_.copy();
      }
      return priceSets_;
    }

    public int getPriceSetsCount() {
      return internalGetPriceSets().getMap().size();
    }
    /**
     * <pre>
     * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
     * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
     * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
     * different message. It does not serve as a permanent identifier of a price set.
     * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
     * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
     * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
     * consecutive days of the stay).
     * See PriceSet for more details.
     * </pre>
     *
     * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
     */

    public boolean containsPriceSets(
        int key) {
      
      return internalGetPriceSets().getMap().containsKey(key);
    }
    /**
     * Use {@link #getPriceSetsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> getPriceSets() {
      return getPriceSetsMap();
    }
    /**
     * <pre>
     * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
     * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
     * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
     * different message. It does not serve as a permanent identifier of a price set.
     * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
     * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
     * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
     * consecutive days of the stay).
     * See PriceSet for more details.
     * </pre>
     *
     * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
     */

    public java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> getPriceSetsMap() {
      return internalGetPriceSets().getMap();
    }
    /**
     * <pre>
     * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
     * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
     * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
     * different message. It does not serve as a permanent identifier of a price set.
     * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
     * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
     * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
     * consecutive days of the stay).
     * See PriceSet for more details.
     * </pre>
     *
     * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
     */

    public com.peakwork.api.accommodation.v1.offerdata.PriceSet getPriceSetsOrDefault(
        int key,
        com.peakwork.api.accommodation.v1.offerdata.PriceSet defaultValue) {
      
      java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> map =
          internalGetPriceSets().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
     * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
     * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
     * different message. It does not serve as a permanent identifier of a price set.
     * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
     * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
     * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
     * consecutive days of the stay).
     * See PriceSet for more details.
     * </pre>
     *
     * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
     */

    public com.peakwork.api.accommodation.v1.offerdata.PriceSet getPriceSetsOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> map =
          internalGetPriceSets().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearPriceSets() {
      internalGetMutablePriceSets().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
     * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
     * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
     * different message. It does not serve as a permanent identifier of a price set.
     * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
     * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
     * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
     * consecutive days of the stay).
     * See PriceSet for more details.
     * </pre>
     *
     * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
     */

    public Builder removePriceSets(
        int key) {
      
      internalGetMutablePriceSets().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet>
    getMutablePriceSets() {
      return internalGetMutablePriceSets().getMutableMap();
    }
    /**
     * <pre>
     * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
     * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
     * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
     * different message. It does not serve as a permanent identifier of a price set.
     * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
     * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
     * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
     * consecutive days of the stay).
     * See PriceSet for more details.
     * </pre>
     *
     * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
     */
    public Builder putPriceSets(
        int key,
        com.peakwork.api.accommodation.v1.offerdata.PriceSet value) {
      
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutablePriceSets().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
     * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
     * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
     * different message. It does not serve as a permanent identifier of a price set.
     * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
     * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
     * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
     * consecutive days of the stay).
     * See PriceSet for more details.
     * </pre>
     *
     * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
     */

    public Builder putAllPriceSets(
        java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet> values) {
      internalGetMutablePriceSets().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData)
  }

  // @@protoc_insertion_point(class_scope:peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData)
  private static final com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData();
  }

  public static com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Accommodation_OfferData>
      PARSER = new com.google.protobuf.AbstractParser<Accommodation_OfferData>() {
    @java.lang.Override
    public Accommodation_OfferData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Accommodation_OfferData(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Accommodation_OfferData> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Accommodation_OfferData> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

