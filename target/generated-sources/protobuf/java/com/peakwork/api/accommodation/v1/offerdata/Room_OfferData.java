// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offerdata.proto

package com.peakwork.api.accommodation.v1.offerdata;

/**
 * <pre>
 * Contains offer data associated with one room. The offer data is only valid for the room given by its room_identifier.
 * A Room_OfferData entity is to be used in a certain entity (e.g. Accommodation_OfferData) to specify the context of
 * the offer data even further.
 * Keys: room_identifier
 * Values: boards
 * </pre>
 *
 * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.Room_OfferData}
 */
public  final class Room_OfferData extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:peakwork.api.accommodation.v1.offerdata.Room_OfferData)
    Room_OfferDataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Room_OfferData.newBuilder() to construct.
  private Room_OfferData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Room_OfferData() {
    roomIdentifier_ = "";
    boards_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Room_OfferData(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            roomIdentifier_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              boards_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.Board_OfferData>();
              mutable_bitField0_ |= 0x00000002;
            }
            boards_.add(
                input.readMessage(com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        boards_ = java.util.Collections.unmodifiableList(boards_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Room_OfferData_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Room_OfferData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.class, com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder.class);
  }

  private int bitField0_;
  public static final int ROOM_IDENTIFIER_FIELD_NUMBER = 1;
  private volatile java.lang.Object roomIdentifier_;
  /**
   * <pre>
   * mandatory - Identifier for the room used by the supplier. This identifier references a room
   * entity (roomIdentifier) from the BaseDataService. See roomIdentifier of Room.
   * The offer information of this message is valid for the referenced room only.
   * </pre>
   *
   * <code>string room_identifier = 1;</code>
   */
  public java.lang.String getRoomIdentifier() {
    java.lang.Object ref = roomIdentifier_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      roomIdentifier_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * mandatory - Identifier for the room used by the supplier. This identifier references a room
   * entity (roomIdentifier) from the BaseDataService. See roomIdentifier of Room.
   * The offer information of this message is valid for the referenced room only.
   * </pre>
   *
   * <code>string room_identifier = 1;</code>
   */
  public com.google.protobuf.ByteString
      getRoomIdentifierBytes() {
    java.lang.Object ref = roomIdentifier_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      roomIdentifier_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int BOARDS_FIELD_NUMBER = 2;
  private java.util.List<com.peakwork.api.accommodation.v1.offerdata.Board_OfferData> boards_;
  /**
   * <pre>
   * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
   * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
   * contain all offer data for a single board (in the given room).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
   */
  public java.util.List<com.peakwork.api.accommodation.v1.offerdata.Board_OfferData> getBoardsList() {
    return boards_;
  }
  /**
   * <pre>
   * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
   * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
   * contain all offer data for a single board (in the given room).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
   */
  public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.Board_OfferDataOrBuilder> 
      getBoardsOrBuilderList() {
    return boards_;
  }
  /**
   * <pre>
   * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
   * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
   * contain all offer data for a single board (in the given room).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
   */
  public int getBoardsCount() {
    return boards_.size();
  }
  /**
   * <pre>
   * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
   * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
   * contain all offer data for a single board (in the given room).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.Board_OfferData getBoards(int index) {
    return boards_.get(index);
  }
  /**
   * <pre>
   * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
   * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
   * contain all offer data for a single board (in the given room).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.Board_OfferDataOrBuilder getBoardsOrBuilder(
      int index) {
    return boards_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getRoomIdentifierBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, roomIdentifier_);
    }
    for (int i = 0; i < boards_.size(); i++) {
      output.writeMessage(2, boards_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getRoomIdentifierBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, roomIdentifier_);
    }
    for (int i = 0; i < boards_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, boards_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.peakwork.api.accommodation.v1.offerdata.Room_OfferData)) {
      return super.equals(obj);
    }
    com.peakwork.api.accommodation.v1.offerdata.Room_OfferData other = (com.peakwork.api.accommodation.v1.offerdata.Room_OfferData) obj;

    if (!getRoomIdentifier()
        .equals(other.getRoomIdentifier())) return false;
    if (!getBoardsList()
        .equals(other.getBoardsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ROOM_IDENTIFIER_FIELD_NUMBER;
    hash = (53 * hash) + getRoomIdentifier().hashCode();
    if (getBoardsCount() > 0) {
      hash = (37 * hash) + BOARDS_FIELD_NUMBER;
      hash = (53 * hash) + getBoardsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.peakwork.api.accommodation.v1.offerdata.Room_OfferData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Contains offer data associated with one room. The offer data is only valid for the room given by its room_identifier.
   * A Room_OfferData entity is to be used in a certain entity (e.g. Accommodation_OfferData) to specify the context of
   * the offer data even further.
   * Keys: room_identifier
   * Values: boards
   * </pre>
   *
   * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.Room_OfferData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:peakwork.api.accommodation.v1.offerdata.Room_OfferData)
      com.peakwork.api.accommodation.v1.offerdata.Room_OfferDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Room_OfferData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Room_OfferData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.class, com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.Builder.class);
    }

    // Construct using com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getBoardsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      roomIdentifier_ = "";

      if (boardsBuilder_ == null) {
        boards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        boardsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_Room_OfferData_descriptor;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.Room_OfferData getDefaultInstanceForType() {
      return com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.getDefaultInstance();
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.Room_OfferData build() {
      com.peakwork.api.accommodation.v1.offerdata.Room_OfferData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.Room_OfferData buildPartial() {
      com.peakwork.api.accommodation.v1.offerdata.Room_OfferData result = new com.peakwork.api.accommodation.v1.offerdata.Room_OfferData(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.roomIdentifier_ = roomIdentifier_;
      if (boardsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          boards_ = java.util.Collections.unmodifiableList(boards_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.boards_ = boards_;
      } else {
        result.boards_ = boardsBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.peakwork.api.accommodation.v1.offerdata.Room_OfferData) {
        return mergeFrom((com.peakwork.api.accommodation.v1.offerdata.Room_OfferData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.peakwork.api.accommodation.v1.offerdata.Room_OfferData other) {
      if (other == com.peakwork.api.accommodation.v1.offerdata.Room_OfferData.getDefaultInstance()) return this;
      if (!other.getRoomIdentifier().isEmpty()) {
        roomIdentifier_ = other.roomIdentifier_;
        onChanged();
      }
      if (boardsBuilder_ == null) {
        if (!other.boards_.isEmpty()) {
          if (boards_.isEmpty()) {
            boards_ = other.boards_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBoardsIsMutable();
            boards_.addAll(other.boards_);
          }
          onChanged();
        }
      } else {
        if (!other.boards_.isEmpty()) {
          if (boardsBuilder_.isEmpty()) {
            boardsBuilder_.dispose();
            boardsBuilder_ = null;
            boards_ = other.boards_;
            bitField0_ = (bitField0_ & ~0x00000002);
            boardsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getBoardsFieldBuilder() : null;
          } else {
            boardsBuilder_.addAllMessages(other.boards_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.peakwork.api.accommodation.v1.offerdata.Room_OfferData parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.peakwork.api.accommodation.v1.offerdata.Room_OfferData) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object roomIdentifier_ = "";
    /**
     * <pre>
     * mandatory - Identifier for the room used by the supplier. This identifier references a room
     * entity (roomIdentifier) from the BaseDataService. See roomIdentifier of Room.
     * The offer information of this message is valid for the referenced room only.
     * </pre>
     *
     * <code>string room_identifier = 1;</code>
     */
    public java.lang.String getRoomIdentifier() {
      java.lang.Object ref = roomIdentifier_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        roomIdentifier_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Identifier for the room used by the supplier. This identifier references a room
     * entity (roomIdentifier) from the BaseDataService. See roomIdentifier of Room.
     * The offer information of this message is valid for the referenced room only.
     * </pre>
     *
     * <code>string room_identifier = 1;</code>
     */
    public com.google.protobuf.ByteString
        getRoomIdentifierBytes() {
      java.lang.Object ref = roomIdentifier_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        roomIdentifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * mandatory - Identifier for the room used by the supplier. This identifier references a room
     * entity (roomIdentifier) from the BaseDataService. See roomIdentifier of Room.
     * The offer information of this message is valid for the referenced room only.
     * </pre>
     *
     * <code>string room_identifier = 1;</code>
     */
    public Builder setRoomIdentifier(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      roomIdentifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Identifier for the room used by the supplier. This identifier references a room
     * entity (roomIdentifier) from the BaseDataService. See roomIdentifier of Room.
     * The offer information of this message is valid for the referenced room only.
     * </pre>
     *
     * <code>string room_identifier = 1;</code>
     */
    public Builder clearRoomIdentifier() {
      
      roomIdentifier_ = getDefaultInstance().getRoomIdentifier();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mandatory - Identifier for the room used by the supplier. This identifier references a room
     * entity (roomIdentifier) from the BaseDataService. See roomIdentifier of Room.
     * The offer information of this message is valid for the referenced room only.
     * </pre>
     *
     * <code>string room_identifier = 1;</code>
     */
    public Builder setRoomIdentifierBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      roomIdentifier_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.peakwork.api.accommodation.v1.offerdata.Board_OfferData> boards_ =
      java.util.Collections.emptyList();
    private void ensureBoardsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        boards_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.Board_OfferData>(boards_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.Board_OfferData, com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder, com.peakwork.api.accommodation.v1.offerdata.Board_OfferDataOrBuilder> boardsBuilder_;

    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.Board_OfferData> getBoardsList() {
      if (boardsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(boards_);
      } else {
        return boardsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public int getBoardsCount() {
      if (boardsBuilder_ == null) {
        return boards_.size();
      } else {
        return boardsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.Board_OfferData getBoards(int index) {
      if (boardsBuilder_ == null) {
        return boards_.get(index);
      } else {
        return boardsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public Builder setBoards(
        int index, com.peakwork.api.accommodation.v1.offerdata.Board_OfferData value) {
      if (boardsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBoardsIsMutable();
        boards_.set(index, value);
        onChanged();
      } else {
        boardsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public Builder setBoards(
        int index, com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder builderForValue) {
      if (boardsBuilder_ == null) {
        ensureBoardsIsMutable();
        boards_.set(index, builderForValue.build());
        onChanged();
      } else {
        boardsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public Builder addBoards(com.peakwork.api.accommodation.v1.offerdata.Board_OfferData value) {
      if (boardsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBoardsIsMutable();
        boards_.add(value);
        onChanged();
      } else {
        boardsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public Builder addBoards(
        int index, com.peakwork.api.accommodation.v1.offerdata.Board_OfferData value) {
      if (boardsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBoardsIsMutable();
        boards_.add(index, value);
        onChanged();
      } else {
        boardsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public Builder addBoards(
        com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder builderForValue) {
      if (boardsBuilder_ == null) {
        ensureBoardsIsMutable();
        boards_.add(builderForValue.build());
        onChanged();
      } else {
        boardsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public Builder addBoards(
        int index, com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder builderForValue) {
      if (boardsBuilder_ == null) {
        ensureBoardsIsMutable();
        boards_.add(index, builderForValue.build());
        onChanged();
      } else {
        boardsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public Builder addAllBoards(
        java.lang.Iterable<? extends com.peakwork.api.accommodation.v1.offerdata.Board_OfferData> values) {
      if (boardsBuilder_ == null) {
        ensureBoardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, boards_);
        onChanged();
      } else {
        boardsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public Builder clearBoards() {
      if (boardsBuilder_ == null) {
        boards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        boardsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public Builder removeBoards(int index) {
      if (boardsBuilder_ == null) {
        ensureBoardsIsMutable();
        boards_.remove(index);
        onChanged();
      } else {
        boardsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder getBoardsBuilder(
        int index) {
      return getBoardsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.Board_OfferDataOrBuilder getBoardsOrBuilder(
        int index) {
      if (boardsBuilder_ == null) {
        return boards_.get(index);  } else {
        return boardsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.Board_OfferDataOrBuilder> 
         getBoardsOrBuilderList() {
      if (boardsBuilder_ != null) {
        return boardsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(boards_);
      }
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder addBoardsBuilder() {
      return getBoardsFieldBuilder().addBuilder(
          com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.getDefaultInstance());
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder addBoardsBuilder(
        int index) {
      return getBoardsFieldBuilder().addBuilder(
          index, com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.getDefaultInstance());
    }
    /**
     * <pre>
     * mandatory - List of offer data grouped by boards. boards contains the offer data information for the room. On this
     * level, the offer data is grouped by boards (see Board in BaseDataService). Each Board_OfferData element will
     * contain all offer data for a single board (in the given room).
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.Board_OfferData boards = 2;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder> 
         getBoardsBuilderList() {
      return getBoardsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.Board_OfferData, com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder, com.peakwork.api.accommodation.v1.offerdata.Board_OfferDataOrBuilder> 
        getBoardsFieldBuilder() {
      if (boardsBuilder_ == null) {
        boardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.peakwork.api.accommodation.v1.offerdata.Board_OfferData, com.peakwork.api.accommodation.v1.offerdata.Board_OfferData.Builder, com.peakwork.api.accommodation.v1.offerdata.Board_OfferDataOrBuilder>(
                boards_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        boards_ = null;
      }
      return boardsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:peakwork.api.accommodation.v1.offerdata.Room_OfferData)
  }

  // @@protoc_insertion_point(class_scope:peakwork.api.accommodation.v1.offerdata.Room_OfferData)
  private static final com.peakwork.api.accommodation.v1.offerdata.Room_OfferData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.peakwork.api.accommodation.v1.offerdata.Room_OfferData();
  }

  public static com.peakwork.api.accommodation.v1.offerdata.Room_OfferData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Room_OfferData>
      PARSER = new com.google.protobuf.AbstractParser<Room_OfferData>() {
    @java.lang.Override
    public Room_OfferData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Room_OfferData(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Room_OfferData> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Room_OfferData> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.peakwork.api.accommodation.v1.offerdata.Room_OfferData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

