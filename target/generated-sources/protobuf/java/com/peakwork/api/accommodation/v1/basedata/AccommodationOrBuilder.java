// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basedata.proto

package com.peakwork.api.accommodation.v1.basedata;

public interface AccommodationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:peakwork.api.accommodation.v1.basedata.Accommodation)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * mandatory - Identifies an accommodation within the scope of one supplier, i.e. it must be unique per supplier. A
   * supplier can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
   * accommodation from the supplier's system has the same supplier_accommodation_id, whenever it is referenced in the
   * Accommodation API. This is especially important, when updating accommodation data. Data of an accommodation with
   * the same identifier will be replaced, since they are considered to reference the same accommodation entity.
   * </pre>
   *
   * <code>string supplier_accommodation_id = 1;</code>
   */
  java.lang.String getSupplierAccommodationId();
  /**
   * <pre>
   * mandatory - Identifies an accommodation within the scope of one supplier, i.e. it must be unique per supplier. A
   * supplier can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
   * accommodation from the supplier's system has the same supplier_accommodation_id, whenever it is referenced in the
   * Accommodation API. This is especially important, when updating accommodation data. Data of an accommodation with
   * the same identifier will be replaced, since they are considered to reference the same accommodation entity.
   * </pre>
   *
   * <code>string supplier_accommodation_id = 1;</code>
   */
  com.google.protobuf.ByteString
      getSupplierAccommodationIdBytes();

  /**
   * <pre>
   * mandatory - The names of the accommodation in multiple languages as a map. At least one name must be given.
   * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
   * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
   * - value (string): the name of the accommodation in the corresponding language
   * </pre>
   *
   * <code>map&lt;string, string&gt; name = 2;</code>
   */
  int getNameCount();
  /**
   * <pre>
   * mandatory - The names of the accommodation in multiple languages as a map. At least one name must be given.
   * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
   * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
   * - value (string): the name of the accommodation in the corresponding language
   * </pre>
   *
   * <code>map&lt;string, string&gt; name = 2;</code>
   */
  boolean containsName(
      java.lang.String key);
  /**
   * Use {@link #getNameMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getName();
  /**
   * <pre>
   * mandatory - The names of the accommodation in multiple languages as a map. At least one name must be given.
   * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
   * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
   * - value (string): the name of the accommodation in the corresponding language
   * </pre>
   *
   * <code>map&lt;string, string&gt; name = 2;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getNameMap();
  /**
   * <pre>
   * mandatory - The names of the accommodation in multiple languages as a map. At least one name must be given.
   * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
   * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
   * - value (string): the name of the accommodation in the corresponding language
   * </pre>
   *
   * <code>map&lt;string, string&gt; name = 2;</code>
   */

  java.lang.String getNameOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * mandatory - The names of the accommodation in multiple languages as a map. At least one name must be given.
   * - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
   * being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
   * - value (string): the name of the accommodation in the corresponding language
   * </pre>
   *
   * <code>map&lt;string, string&gt; name = 2;</code>
   */

  java.lang.String getNameOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * mandatory - Address of the accommodation
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.basedata.Address address = 3;</code>
   */
  boolean hasAddress();
  /**
   * <pre>
   * mandatory - Address of the accommodation
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.basedata.Address address = 3;</code>
   */
  com.peakwork.api.accommodation.v1.basedata.Address getAddress();
  /**
   * <pre>
   * mandatory - Address of the accommodation
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.basedata.Address address = 3;</code>
   */
  com.peakwork.api.accommodation.v1.basedata.AddressOrBuilder getAddressOrBuilder();

  /**
   * <pre>
   * optional - Geographical coordinates of the accommodation
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.basedata.Coordinates coordinates = 4;</code>
   */
  boolean hasCoordinates();
  /**
   * <pre>
   * optional - Geographical coordinates of the accommodation
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.basedata.Coordinates coordinates = 4;</code>
   */
  com.peakwork.api.accommodation.v1.basedata.Coordinates getCoordinates();
  /**
   * <pre>
   * optional - Geographical coordinates of the accommodation
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.basedata.Coordinates coordinates = 4;</code>
   */
  com.peakwork.api.accommodation.v1.basedata.CoordinatesOrBuilder getCoordinatesOrBuilder();

  /**
   * <pre>
   * optional - List of airports, that can be used for arrival at the accommodation. Each entry denotes an airport in
   * IATA code format.
   * </pre>
   *
   * <code>repeated string arrival_airports = 5;</code>
   */
  java.util.List<java.lang.String>
      getArrivalAirportsList();
  /**
   * <pre>
   * optional - List of airports, that can be used for arrival at the accommodation. Each entry denotes an airport in
   * IATA code format.
   * </pre>
   *
   * <code>repeated string arrival_airports = 5;</code>
   */
  int getArrivalAirportsCount();
  /**
   * <pre>
   * optional - List of airports, that can be used for arrival at the accommodation. Each entry denotes an airport in
   * IATA code format.
   * </pre>
   *
   * <code>repeated string arrival_airports = 5;</code>
   */
  java.lang.String getArrivalAirports(int index);
  /**
   * <pre>
   * optional - List of airports, that can be used for arrival at the accommodation. Each entry denotes an airport in
   * IATA code format.
   * </pre>
   *
   * <code>repeated string arrival_airports = 5;</code>
   */
  com.google.protobuf.ByteString
      getArrivalAirportsBytes(int index);

  /**
   * <pre>
   * mandatory - Accommodation rating in form of stars. Possible values from 0-7 in steps of 0.5:
   * [ 0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6,5, 7 ]
   * </pre>
   *
   * <code>double star_rating = 6;</code>
   */
  double getStarRating();

  /**
   * <pre>
   * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
   * back to the supplier, when a booking of an offer for this rate is made, in order for the supplier to be able to
   * correctly book the offer in its system.
   * </pre>
   *
   * <code>map&lt;string, string&gt; booking_payload = 7;</code>
   */
  int getBookingPayloadCount();
  /**
   * <pre>
   * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
   * back to the supplier, when a booking of an offer for this rate is made, in order for the supplier to be able to
   * correctly book the offer in its system.
   * </pre>
   *
   * <code>map&lt;string, string&gt; booking_payload = 7;</code>
   */
  boolean containsBookingPayload(
      java.lang.String key);
  /**
   * Use {@link #getBookingPayloadMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getBookingPayload();
  /**
   * <pre>
   * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
   * back to the supplier, when a booking of an offer for this rate is made, in order for the supplier to be able to
   * correctly book the offer in its system.
   * </pre>
   *
   * <code>map&lt;string, string&gt; booking_payload = 7;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getBookingPayloadMap();
  /**
   * <pre>
   * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
   * back to the supplier, when a booking of an offer for this rate is made, in order for the supplier to be able to
   * correctly book the offer in its system.
   * </pre>
   *
   * <code>map&lt;string, string&gt; booking_payload = 7;</code>
   */

  java.lang.String getBookingPayloadOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
   * back to the supplier, when a booking of an offer for this rate is made, in order for the supplier to be able to
   * correctly book the offer in its system.
   * </pre>
   *
   * <code>map&lt;string, string&gt; booking_payload = 7;</code>
   */

  java.lang.String getBookingPayloadOrThrow(
      java.lang.String key);
}
