// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offerdata.proto

package com.peakwork.api.accommodation.v1.offerdata;

public interface Accommodation_OfferDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:peakwork.api.accommodation.v1.offerdata.Accommodation_OfferData)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * mandatory - Identifier for the accommodation used by the supplier. This identifier references an accommodation
   * entity (supplierAccommodationId) from the BaseDataService. See supplierAccommodationId of Accommodation.
   * The offer information of this payload is valid for the referenced accommodation only.
   * </pre>
   *
   * <code>string accommodation_identifier = 1;</code>
   */
  java.lang.String getAccommodationIdentifier();
  /**
   * <pre>
   * mandatory - Identifier for the accommodation used by the supplier. This identifier references an accommodation
   * entity (supplierAccommodationId) from the BaseDataService. See supplierAccommodationId of Accommodation.
   * The offer information of this payload is valid for the referenced accommodation only.
   * </pre>
   *
   * <code>string accommodation_identifier = 1;</code>
   */
  com.google.protobuf.ByteString
      getAccommodationIdentifierBytes();

  /**
   * <pre>
   * mandatory - Identifier for the rate used by the supplier. This identifier references a rate
   * entity (rateIdentifier) from the BaseDataService. See rateIdentifier of Rate.
   * The offer information of this payload is valid for the referenced rate only.
   * </pre>
   *
   * <code>string rate_identifier = 2;</code>
   */
  java.lang.String getRateIdentifier();
  /**
   * <pre>
   * mandatory - Identifier for the rate used by the supplier. This identifier references a rate
   * entity (rateIdentifier) from the BaseDataService. See rateIdentifier of Rate.
   * The offer information of this payload is valid for the referenced rate only.
   * </pre>
   *
   * <code>string rate_identifier = 2;</code>
   */
  com.google.protobuf.ByteString
      getRateIdentifierBytes();

  /**
   * <pre>
   * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
   * for technical reasons. Currently not implemented.
   * </pre>
   *
   * <code>map&lt;string, string&gt; split_identifier = 3;</code>
   */
  int getSplitIdentifierCount();
  /**
   * <pre>
   * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
   * for technical reasons. Currently not implemented.
   * </pre>
   *
   * <code>map&lt;string, string&gt; split_identifier = 3;</code>
   */
  boolean containsSplitIdentifier(
      java.lang.String key);
  /**
   * Use {@link #getSplitIdentifierMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getSplitIdentifier();
  /**
   * <pre>
   * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
   * for technical reasons. Currently not implemented.
   * </pre>
   *
   * <code>map&lt;string, string&gt; split_identifier = 3;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getSplitIdentifierMap();
  /**
   * <pre>
   * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
   * for technical reasons. Currently not implemented.
   * </pre>
   *
   * <code>map&lt;string, string&gt; split_identifier = 3;</code>
   */

  java.lang.String getSplitIdentifierOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * optional - Split identifier used to split deliveries of offer data for an accommodation and rate further down
   * for technical reasons. Currently not implemented.
   * </pre>
   *
   * <code>map&lt;string, string&gt; split_identifier = 3;</code>
   */

  java.lang.String getSplitIdentifierOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * mandatory - Denotes the currency of the offer prices in the given message. All prices in a single message, e.g. for
   * different rooms, boards or arrival dates, have the same currency. The currency is given as code in ISO 4217
   * standard.
   * </pre>
   *
   * <code>string currency = 4;</code>
   */
  java.lang.String getCurrency();
  /**
   * <pre>
   * mandatory - Denotes the currency of the offer prices in the given message. All prices in a single message, e.g. for
   * different rooms, boards or arrival dates, have the same currency. The currency is given as code in ISO 4217
   * standard.
   * </pre>
   *
   * <code>string currency = 4;</code>
   */
  com.google.protobuf.ByteString
      getCurrencyBytes();

  /**
   * <pre>
   * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
   * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
   * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
   * accommodation and rate key combination).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
   */
  java.util.List<com.peakwork.api.accommodation.v1.offerdata.Room_OfferData> 
      getRoomsList();
  /**
   * <pre>
   * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
   * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
   * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
   * accommodation and rate key combination).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
   */
  com.peakwork.api.accommodation.v1.offerdata.Room_OfferData getRooms(int index);
  /**
   * <pre>
   * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
   * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
   * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
   * accommodation and rate key combination).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
   */
  int getRoomsCount();
  /**
   * <pre>
   * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
   * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
   * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
   * accommodation and rate key combination).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
   */
  java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.Room_OfferDataOrBuilder> 
      getRoomsOrBuilderList();
  /**
   * <pre>
   * mandatory - List of offer data grouped by rooms. rooms contains the offer data information for the message, i.e.
   * the accommodation and rate combination. On this level, the offer data is grouped by rooms (see Room in
   * BaseDataService). Each Room_OfferData element will contain all offer data for a single room (in the given
   * accommodation and rate key combination).
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.Room_OfferData rooms = 5;</code>
   */
  com.peakwork.api.accommodation.v1.offerdata.Room_OfferDataOrBuilder getRoomsOrBuilder(
      int index);

  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
   * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
   * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
   * different message. It does not serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
   * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
   * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
   * consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
   */
  int getPriceSetsCount();
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
   * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
   * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
   * different message. It does not serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
   * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
   * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
   * consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
   */
  boolean containsPriceSets(
      int key);
  /**
   * Use {@link #getPriceSetsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet>
  getPriceSets();
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
   * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
   * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
   * different message. It does not serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
   * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
   * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
   * consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
   */
  java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet>
  getPriceSetsMap();
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
   * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
   * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
   * different message. It does not serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
   * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
   * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
   * consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
   */

  com.peakwork.api.accommodation.v1.offerdata.PriceSet getPriceSetsOrDefault(
      int key,
      com.peakwork.api.accommodation.v1.offerdata.PriceSet defaultValue);
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the data in the various
   * RoomOfferData elements via a unique numeric key (uint32). This key is bound to a specific message and can be
   * arbitrarily chosen. This means a key for a price set in one message can be different for the same price set in a
   * different message. It does not serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times in a single RoomOfferData entity or even in multiple different
   * RoomOfferData entities in order to reuse the pricing structure in it. The purpose is to optimize the data size by
   * not duplicating the same price data multiple times (e.g. for the same price on consecutive arrival dates or on
   * consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 6;</code>
   */

  com.peakwork.api.accommodation.v1.offerdata.PriceSet getPriceSetsOrThrow(
      int key);
}
