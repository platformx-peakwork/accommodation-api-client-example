// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offerdata.proto

package com.peakwork.api.accommodation.v1.offerdata;

/**
 * <pre>
 * Represents a set of persons by filtering persons by age ranges and pax count. It is used to to specify which
 * person(s) a price is applicable for.
 * </pre>
 *
 * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.PersonFilter}
 */
public  final class PersonFilter extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:peakwork.api.accommodation.v1.offerdata.PersonFilter)
    PersonFilterOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PersonFilter.newBuilder() to construct.
  private PersonFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PersonFilter() {
    ageRanges_ = java.util.Collections.emptyList();
    paxCountRange_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PersonFilter(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              ageRanges_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.AgeRange>();
              mutable_bitField0_ |= 0x00000001;
            }
            ageRanges_.add(
                input.readMessage(com.peakwork.api.accommodation.v1.offerdata.AgeRange.parser(), extensionRegistry));
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              paxCountRange_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.PaxCountRange>();
              mutable_bitField0_ |= 0x00000002;
            }
            paxCountRange_.add(
                input.readMessage(com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        ageRanges_ = java.util.Collections.unmodifiableList(ageRanges_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        paxCountRange_ = java.util.Collections.unmodifiableList(paxCountRange_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PersonFilter_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PersonFilter_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.peakwork.api.accommodation.v1.offerdata.PersonFilter.class, com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder.class);
  }

  public static final int AGE_RANGES_FIELD_NUMBER = 1;
  private java.util.List<com.peakwork.api.accommodation.v1.offerdata.AgeRange> ageRanges_;
  /**
   * <pre>
   * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
   * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
   */
  public java.util.List<com.peakwork.api.accommodation.v1.offerdata.AgeRange> getAgeRangesList() {
    return ageRanges_;
  }
  /**
   * <pre>
   * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
   * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
   */
  public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.AgeRangeOrBuilder> 
      getAgeRangesOrBuilderList() {
    return ageRanges_;
  }
  /**
   * <pre>
   * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
   * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
   */
  public int getAgeRangesCount() {
    return ageRanges_.size();
  }
  /**
   * <pre>
   * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
   * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.AgeRange getAgeRanges(int index) {
    return ageRanges_.get(index);
  }
  /**
   * <pre>
   * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
   * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.AgeRangeOrBuilder getAgeRangesOrBuilder(
      int index) {
    return ageRanges_.get(index);
  }

  public static final int PAX_COUNT_RANGE_FIELD_NUMBER = 2;
  private java.util.List<com.peakwork.api.accommodation.v1.offerdata.PaxCountRange> paxCountRange_;
  /**
   * <pre>
   * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
   * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
   * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
   * If not given, the PersonFilter is valid for all pax counts.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
   */
  public java.util.List<com.peakwork.api.accommodation.v1.offerdata.PaxCountRange> getPaxCountRangeList() {
    return paxCountRange_;
  }
  /**
   * <pre>
   * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
   * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
   * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
   * If not given, the PersonFilter is valid for all pax counts.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
   */
  public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.PaxCountRangeOrBuilder> 
      getPaxCountRangeOrBuilderList() {
    return paxCountRange_;
  }
  /**
   * <pre>
   * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
   * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
   * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
   * If not given, the PersonFilter is valid for all pax counts.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
   */
  public int getPaxCountRangeCount() {
    return paxCountRange_.size();
  }
  /**
   * <pre>
   * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
   * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
   * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
   * If not given, the PersonFilter is valid for all pax counts.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.PaxCountRange getPaxCountRange(int index) {
    return paxCountRange_.get(index);
  }
  /**
   * <pre>
   * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
   * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
   * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
   * If not given, the PersonFilter is valid for all pax counts.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.PaxCountRangeOrBuilder getPaxCountRangeOrBuilder(
      int index) {
    return paxCountRange_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < ageRanges_.size(); i++) {
      output.writeMessage(1, ageRanges_.get(i));
    }
    for (int i = 0; i < paxCountRange_.size(); i++) {
      output.writeMessage(2, paxCountRange_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < ageRanges_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, ageRanges_.get(i));
    }
    for (int i = 0; i < paxCountRange_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, paxCountRange_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.peakwork.api.accommodation.v1.offerdata.PersonFilter)) {
      return super.equals(obj);
    }
    com.peakwork.api.accommodation.v1.offerdata.PersonFilter other = (com.peakwork.api.accommodation.v1.offerdata.PersonFilter) obj;

    if (!getAgeRangesList()
        .equals(other.getAgeRangesList())) return false;
    if (!getPaxCountRangeList()
        .equals(other.getPaxCountRangeList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getAgeRangesCount() > 0) {
      hash = (37 * hash) + AGE_RANGES_FIELD_NUMBER;
      hash = (53 * hash) + getAgeRangesList().hashCode();
    }
    if (getPaxCountRangeCount() > 0) {
      hash = (37 * hash) + PAX_COUNT_RANGE_FIELD_NUMBER;
      hash = (53 * hash) + getPaxCountRangeList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.peakwork.api.accommodation.v1.offerdata.PersonFilter prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Represents a set of persons by filtering persons by age ranges and pax count. It is used to to specify which
   * person(s) a price is applicable for.
   * </pre>
   *
   * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.PersonFilter}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:peakwork.api.accommodation.v1.offerdata.PersonFilter)
      com.peakwork.api.accommodation.v1.offerdata.PersonFilterOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PersonFilter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PersonFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.peakwork.api.accommodation.v1.offerdata.PersonFilter.class, com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder.class);
    }

    // Construct using com.peakwork.api.accommodation.v1.offerdata.PersonFilter.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getAgeRangesFieldBuilder();
        getPaxCountRangeFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (ageRangesBuilder_ == null) {
        ageRanges_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        ageRangesBuilder_.clear();
      }
      if (paxCountRangeBuilder_ == null) {
        paxCountRange_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        paxCountRangeBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PersonFilter_descriptor;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.PersonFilter getDefaultInstanceForType() {
      return com.peakwork.api.accommodation.v1.offerdata.PersonFilter.getDefaultInstance();
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.PersonFilter build() {
      com.peakwork.api.accommodation.v1.offerdata.PersonFilter result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.PersonFilter buildPartial() {
      com.peakwork.api.accommodation.v1.offerdata.PersonFilter result = new com.peakwork.api.accommodation.v1.offerdata.PersonFilter(this);
      int from_bitField0_ = bitField0_;
      if (ageRangesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          ageRanges_ = java.util.Collections.unmodifiableList(ageRanges_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.ageRanges_ = ageRanges_;
      } else {
        result.ageRanges_ = ageRangesBuilder_.build();
      }
      if (paxCountRangeBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          paxCountRange_ = java.util.Collections.unmodifiableList(paxCountRange_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.paxCountRange_ = paxCountRange_;
      } else {
        result.paxCountRange_ = paxCountRangeBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.peakwork.api.accommodation.v1.offerdata.PersonFilter) {
        return mergeFrom((com.peakwork.api.accommodation.v1.offerdata.PersonFilter)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.peakwork.api.accommodation.v1.offerdata.PersonFilter other) {
      if (other == com.peakwork.api.accommodation.v1.offerdata.PersonFilter.getDefaultInstance()) return this;
      if (ageRangesBuilder_ == null) {
        if (!other.ageRanges_.isEmpty()) {
          if (ageRanges_.isEmpty()) {
            ageRanges_ = other.ageRanges_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAgeRangesIsMutable();
            ageRanges_.addAll(other.ageRanges_);
          }
          onChanged();
        }
      } else {
        if (!other.ageRanges_.isEmpty()) {
          if (ageRangesBuilder_.isEmpty()) {
            ageRangesBuilder_.dispose();
            ageRangesBuilder_ = null;
            ageRanges_ = other.ageRanges_;
            bitField0_ = (bitField0_ & ~0x00000001);
            ageRangesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAgeRangesFieldBuilder() : null;
          } else {
            ageRangesBuilder_.addAllMessages(other.ageRanges_);
          }
        }
      }
      if (paxCountRangeBuilder_ == null) {
        if (!other.paxCountRange_.isEmpty()) {
          if (paxCountRange_.isEmpty()) {
            paxCountRange_ = other.paxCountRange_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensurePaxCountRangeIsMutable();
            paxCountRange_.addAll(other.paxCountRange_);
          }
          onChanged();
        }
      } else {
        if (!other.paxCountRange_.isEmpty()) {
          if (paxCountRangeBuilder_.isEmpty()) {
            paxCountRangeBuilder_.dispose();
            paxCountRangeBuilder_ = null;
            paxCountRange_ = other.paxCountRange_;
            bitField0_ = (bitField0_ & ~0x00000002);
            paxCountRangeBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPaxCountRangeFieldBuilder() : null;
          } else {
            paxCountRangeBuilder_.addAllMessages(other.paxCountRange_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.peakwork.api.accommodation.v1.offerdata.PersonFilter parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.peakwork.api.accommodation.v1.offerdata.PersonFilter) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.peakwork.api.accommodation.v1.offerdata.AgeRange> ageRanges_ =
      java.util.Collections.emptyList();
    private void ensureAgeRangesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        ageRanges_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.AgeRange>(ageRanges_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.AgeRange, com.peakwork.api.accommodation.v1.offerdata.AgeRange.Builder, com.peakwork.api.accommodation.v1.offerdata.AgeRangeOrBuilder> ageRangesBuilder_;

    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.AgeRange> getAgeRangesList() {
      if (ageRangesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(ageRanges_);
      } else {
        return ageRangesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public int getAgeRangesCount() {
      if (ageRangesBuilder_ == null) {
        return ageRanges_.size();
      } else {
        return ageRangesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.AgeRange getAgeRanges(int index) {
      if (ageRangesBuilder_ == null) {
        return ageRanges_.get(index);
      } else {
        return ageRangesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public Builder setAgeRanges(
        int index, com.peakwork.api.accommodation.v1.offerdata.AgeRange value) {
      if (ageRangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAgeRangesIsMutable();
        ageRanges_.set(index, value);
        onChanged();
      } else {
        ageRangesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public Builder setAgeRanges(
        int index, com.peakwork.api.accommodation.v1.offerdata.AgeRange.Builder builderForValue) {
      if (ageRangesBuilder_ == null) {
        ensureAgeRangesIsMutable();
        ageRanges_.set(index, builderForValue.build());
        onChanged();
      } else {
        ageRangesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public Builder addAgeRanges(com.peakwork.api.accommodation.v1.offerdata.AgeRange value) {
      if (ageRangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAgeRangesIsMutable();
        ageRanges_.add(value);
        onChanged();
      } else {
        ageRangesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public Builder addAgeRanges(
        int index, com.peakwork.api.accommodation.v1.offerdata.AgeRange value) {
      if (ageRangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAgeRangesIsMutable();
        ageRanges_.add(index, value);
        onChanged();
      } else {
        ageRangesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public Builder addAgeRanges(
        com.peakwork.api.accommodation.v1.offerdata.AgeRange.Builder builderForValue) {
      if (ageRangesBuilder_ == null) {
        ensureAgeRangesIsMutable();
        ageRanges_.add(builderForValue.build());
        onChanged();
      } else {
        ageRangesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public Builder addAgeRanges(
        int index, com.peakwork.api.accommodation.v1.offerdata.AgeRange.Builder builderForValue) {
      if (ageRangesBuilder_ == null) {
        ensureAgeRangesIsMutable();
        ageRanges_.add(index, builderForValue.build());
        onChanged();
      } else {
        ageRangesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public Builder addAllAgeRanges(
        java.lang.Iterable<? extends com.peakwork.api.accommodation.v1.offerdata.AgeRange> values) {
      if (ageRangesBuilder_ == null) {
        ensureAgeRangesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ageRanges_);
        onChanged();
      } else {
        ageRangesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public Builder clearAgeRanges() {
      if (ageRangesBuilder_ == null) {
        ageRanges_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        ageRangesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public Builder removeAgeRanges(int index) {
      if (ageRangesBuilder_ == null) {
        ensureAgeRangesIsMutable();
        ageRanges_.remove(index);
        onChanged();
      } else {
        ageRangesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.AgeRange.Builder getAgeRangesBuilder(
        int index) {
      return getAgeRangesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.AgeRangeOrBuilder getAgeRangesOrBuilder(
        int index) {
      if (ageRangesBuilder_ == null) {
        return ageRanges_.get(index);  } else {
        return ageRangesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.AgeRangeOrBuilder> 
         getAgeRangesOrBuilderList() {
      if (ageRangesBuilder_ != null) {
        return ageRangesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(ageRanges_);
      }
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.AgeRange.Builder addAgeRangesBuilder() {
      return getAgeRangesFieldBuilder().addBuilder(
          com.peakwork.api.accommodation.v1.offerdata.AgeRange.getDefaultInstance());
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.AgeRange.Builder addAgeRangesBuilder(
        int index) {
      return getAgeRangesFieldBuilder().addBuilder(
          index, com.peakwork.api.accommodation.v1.offerdata.AgeRange.getDefaultInstance());
    }
    /**
     * <pre>
     * optional - A list of age ranges. The PersonFilter applies to a person, if the person is in at least one of the
     * given age ranges and the pax_count_range matches. If not given, the PersonFilter is valid for all ages.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.AgeRange age_ranges = 1;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.AgeRange.Builder> 
         getAgeRangesBuilderList() {
      return getAgeRangesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.AgeRange, com.peakwork.api.accommodation.v1.offerdata.AgeRange.Builder, com.peakwork.api.accommodation.v1.offerdata.AgeRangeOrBuilder> 
        getAgeRangesFieldBuilder() {
      if (ageRangesBuilder_ == null) {
        ageRangesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.peakwork.api.accommodation.v1.offerdata.AgeRange, com.peakwork.api.accommodation.v1.offerdata.AgeRange.Builder, com.peakwork.api.accommodation.v1.offerdata.AgeRangeOrBuilder>(
                ageRanges_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        ageRanges_ = null;
      }
      return ageRangesBuilder_;
    }

    private java.util.List<com.peakwork.api.accommodation.v1.offerdata.PaxCountRange> paxCountRange_ =
      java.util.Collections.emptyList();
    private void ensurePaxCountRangeIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        paxCountRange_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.PaxCountRange>(paxCountRange_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.PaxCountRange, com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.Builder, com.peakwork.api.accommodation.v1.offerdata.PaxCountRangeOrBuilder> paxCountRangeBuilder_;

    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.PaxCountRange> getPaxCountRangeList() {
      if (paxCountRangeBuilder_ == null) {
        return java.util.Collections.unmodifiableList(paxCountRange_);
      } else {
        return paxCountRangeBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public int getPaxCountRangeCount() {
      if (paxCountRangeBuilder_ == null) {
        return paxCountRange_.size();
      } else {
        return paxCountRangeBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PaxCountRange getPaxCountRange(int index) {
      if (paxCountRangeBuilder_ == null) {
        return paxCountRange_.get(index);
      } else {
        return paxCountRangeBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public Builder setPaxCountRange(
        int index, com.peakwork.api.accommodation.v1.offerdata.PaxCountRange value) {
      if (paxCountRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePaxCountRangeIsMutable();
        paxCountRange_.set(index, value);
        onChanged();
      } else {
        paxCountRangeBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public Builder setPaxCountRange(
        int index, com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.Builder builderForValue) {
      if (paxCountRangeBuilder_ == null) {
        ensurePaxCountRangeIsMutable();
        paxCountRange_.set(index, builderForValue.build());
        onChanged();
      } else {
        paxCountRangeBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public Builder addPaxCountRange(com.peakwork.api.accommodation.v1.offerdata.PaxCountRange value) {
      if (paxCountRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePaxCountRangeIsMutable();
        paxCountRange_.add(value);
        onChanged();
      } else {
        paxCountRangeBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public Builder addPaxCountRange(
        int index, com.peakwork.api.accommodation.v1.offerdata.PaxCountRange value) {
      if (paxCountRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePaxCountRangeIsMutable();
        paxCountRange_.add(index, value);
        onChanged();
      } else {
        paxCountRangeBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public Builder addPaxCountRange(
        com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.Builder builderForValue) {
      if (paxCountRangeBuilder_ == null) {
        ensurePaxCountRangeIsMutable();
        paxCountRange_.add(builderForValue.build());
        onChanged();
      } else {
        paxCountRangeBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public Builder addPaxCountRange(
        int index, com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.Builder builderForValue) {
      if (paxCountRangeBuilder_ == null) {
        ensurePaxCountRangeIsMutable();
        paxCountRange_.add(index, builderForValue.build());
        onChanged();
      } else {
        paxCountRangeBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public Builder addAllPaxCountRange(
        java.lang.Iterable<? extends com.peakwork.api.accommodation.v1.offerdata.PaxCountRange> values) {
      if (paxCountRangeBuilder_ == null) {
        ensurePaxCountRangeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, paxCountRange_);
        onChanged();
      } else {
        paxCountRangeBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public Builder clearPaxCountRange() {
      if (paxCountRangeBuilder_ == null) {
        paxCountRange_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        paxCountRangeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public Builder removePaxCountRange(int index) {
      if (paxCountRangeBuilder_ == null) {
        ensurePaxCountRangeIsMutable();
        paxCountRange_.remove(index);
        onChanged();
      } else {
        paxCountRangeBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.Builder getPaxCountRangeBuilder(
        int index) {
      return getPaxCountRangeFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PaxCountRangeOrBuilder getPaxCountRangeOrBuilder(
        int index) {
      if (paxCountRangeBuilder_ == null) {
        return paxCountRange_.get(index);  } else {
        return paxCountRangeBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.PaxCountRangeOrBuilder> 
         getPaxCountRangeOrBuilderList() {
      if (paxCountRangeBuilder_ != null) {
        return paxCountRangeBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(paxCountRange_);
      }
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.Builder addPaxCountRangeBuilder() {
      return getPaxCountRangeFieldBuilder().addBuilder(
          com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.getDefaultInstance());
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.Builder addPaxCountRangeBuilder(
        int index) {
      return getPaxCountRangeFieldBuilder().addBuilder(
          index, com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.getDefaultInstance());
    }
    /**
     * <pre>
     * optional - A list of pax count ranges. A Pax count denotes the position of a person within the age ranges given in
     * age_ranges, e.g. pax count = 3 =&gt; "The third person in the given age range". The PersonFilter applies to a person,
     * if the pax count of the person in the given age ranges is within at least one of the given PaxCountRanges.
     * If not given, the PersonFilter is valid for all pax counts.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PaxCountRange pax_count_range = 2;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.Builder> 
         getPaxCountRangeBuilderList() {
      return getPaxCountRangeFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.PaxCountRange, com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.Builder, com.peakwork.api.accommodation.v1.offerdata.PaxCountRangeOrBuilder> 
        getPaxCountRangeFieldBuilder() {
      if (paxCountRangeBuilder_ == null) {
        paxCountRangeBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.peakwork.api.accommodation.v1.offerdata.PaxCountRange, com.peakwork.api.accommodation.v1.offerdata.PaxCountRange.Builder, com.peakwork.api.accommodation.v1.offerdata.PaxCountRangeOrBuilder>(
                paxCountRange_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        paxCountRange_ = null;
      }
      return paxCountRangeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:peakwork.api.accommodation.v1.offerdata.PersonFilter)
  }

  // @@protoc_insertion_point(class_scope:peakwork.api.accommodation.v1.offerdata.PersonFilter)
  private static final com.peakwork.api.accommodation.v1.offerdata.PersonFilter DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.peakwork.api.accommodation.v1.offerdata.PersonFilter();
  }

  public static com.peakwork.api.accommodation.v1.offerdata.PersonFilter getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PersonFilter>
      PARSER = new com.google.protobuf.AbstractParser<PersonFilter>() {
    @java.lang.Override
    public PersonFilter parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PersonFilter(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PersonFilter> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PersonFilter> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.peakwork.api.accommodation.v1.offerdata.PersonFilter getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

