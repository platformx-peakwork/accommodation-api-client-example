// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offerdata.proto

package com.peakwork.api.accommodation.v1.offerdata;

/**
 * <pre>
 * Representation of the "value" of an offer. The value of an offer informs about the final price (and meta information)
 * of a travel with given criteria. I.e. given a combination of accommodation, rate, room, board, arrival date and LOS
 * there is exactly one OfferValue matching the criteria. From this OfferValue, that final price of the travel (offer)
 * can be calculated.
 * There are multiple ways to structure the price of an offer: either as a single final object price (object_price) or
 * as a complex pricing structure, that allows to set daily prices as well as person specific prices (price_set_keys).
 * It is not possible to use both "object_price" and "price_set_keys" at the same time, but it is mandatory to use one
 * of them.
 * </pre>
 *
 * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.OfferValue}
 */
public  final class OfferValue extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:peakwork.api.accommodation.v1.offerdata.OfferValue)
    OfferValueOrBuilder {
private static final long serialVersionUID = 0L;
  // Use OfferValue.newBuilder() to construct.
  private OfferValue(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private OfferValue() {
    priceSetKeys_ = emptyIntList();
    globalTypes_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private OfferValue(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              globalTypes_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.common.GlobalType>();
              mutable_bitField0_ |= 0x00000004;
            }
            globalTypes_.add(
                input.readMessage(com.peakwork.api.accommodation.v1.common.GlobalType.parser(), extensionRegistry));
            break;
          }
          case 16: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              priceSetKeys_ = newIntList();
              mutable_bitField0_ |= 0x00000002;
            }
            priceSetKeys_.addInt(input.readUInt32());
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
              priceSetKeys_ = newIntList();
              mutable_bitField0_ |= 0x00000002;
            }
            while (input.getBytesUntilLimit() > 0) {
              priceSetKeys_.addInt(input.readUInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 25: {

            objectPrice_ = input.readDouble();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        globalTypes_ = java.util.Collections.unmodifiableList(globalTypes_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        priceSetKeys_.makeImmutable(); // C
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_OfferValue_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_OfferValue_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.peakwork.api.accommodation.v1.offerdata.OfferValue.class, com.peakwork.api.accommodation.v1.offerdata.OfferValue.Builder.class);
  }

  private int bitField0_;
  public static final int OBJECT_PRICE_FIELD_NUMBER = 3;
  private double objectPrice_;
  /**
   * <pre>
   * optional - Holds a single final price for the offer. One of object_price or price_set_keys must be used.
   * It is the easiest form of an offer price. Example: if the object_price is 50 for a given combination of
   * accommodation, rate, room, board, arrival date and LOS and the currency is set to EUR, that exact offer costs 50â‚¬
   * and no further price calculation is required.
   * </pre>
   *
   * <code>double object_price = 3;</code>
   */
  public double getObjectPrice() {
    return objectPrice_;
  }

  public static final int PRICE_SET_KEYS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.IntList priceSetKeys_;
  /**
   * <pre>
   * optional - Used to represent a complex pricing structure using daily and person specific prices.
   * One of price_set_keys or object_price must be used.
   * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
   * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
   * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
   * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
   * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
   * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
   * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
   * price for each consecutive day of the stay, starting with the first.
   * Price sets can also be referenced multiple times. Example:
   * - Position 0: PriceSet A -&gt; Base price
   * - Position 1: PriceSet B -&gt; Day 1
   * - Position 2: PriceSet B -&gt; Day 2
   * - Position 3: PriceSet C -&gt; Day 3
   * - Position 4: PriceSet D -&gt; Day 4
   * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
   * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
   * (PriceSet A + 2*PriceSet B + PriceSet C).
   * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
   * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
   * and summing up the price sets up to different lengths of the list.
   * See PriceSet for how to calculate the price of a single price set.
   * </pre>
   *
   * <code>repeated uint32 price_set_keys = 2;</code>
   */
  public java.util.List<java.lang.Integer>
      getPriceSetKeysList() {
    return priceSetKeys_;
  }
  /**
   * <pre>
   * optional - Used to represent a complex pricing structure using daily and person specific prices.
   * One of price_set_keys or object_price must be used.
   * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
   * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
   * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
   * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
   * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
   * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
   * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
   * price for each consecutive day of the stay, starting with the first.
   * Price sets can also be referenced multiple times. Example:
   * - Position 0: PriceSet A -&gt; Base price
   * - Position 1: PriceSet B -&gt; Day 1
   * - Position 2: PriceSet B -&gt; Day 2
   * - Position 3: PriceSet C -&gt; Day 3
   * - Position 4: PriceSet D -&gt; Day 4
   * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
   * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
   * (PriceSet A + 2*PriceSet B + PriceSet C).
   * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
   * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
   * and summing up the price sets up to different lengths of the list.
   * See PriceSet for how to calculate the price of a single price set.
   * </pre>
   *
   * <code>repeated uint32 price_set_keys = 2;</code>
   */
  public int getPriceSetKeysCount() {
    return priceSetKeys_.size();
  }
  /**
   * <pre>
   * optional - Used to represent a complex pricing structure using daily and person specific prices.
   * One of price_set_keys or object_price must be used.
   * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
   * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
   * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
   * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
   * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
   * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
   * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
   * price for each consecutive day of the stay, starting with the first.
   * Price sets can also be referenced multiple times. Example:
   * - Position 0: PriceSet A -&gt; Base price
   * - Position 1: PriceSet B -&gt; Day 1
   * - Position 2: PriceSet B -&gt; Day 2
   * - Position 3: PriceSet C -&gt; Day 3
   * - Position 4: PriceSet D -&gt; Day 4
   * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
   * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
   * (PriceSet A + 2*PriceSet B + PriceSet C).
   * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
   * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
   * and summing up the price sets up to different lengths of the list.
   * See PriceSet for how to calculate the price of a single price set.
   * </pre>
   *
   * <code>repeated uint32 price_set_keys = 2;</code>
   */
  public int getPriceSetKeys(int index) {
    return priceSetKeys_.getInt(index);
  }
  private int priceSetKeysMemoizedSerializedSize = -1;

  public static final int GLOBAL_TYPES_FIELD_NUMBER = 1;
  private java.util.List<com.peakwork.api.accommodation.v1.common.GlobalType> globalTypes_;
  /**
   * <pre>
   * optional - List of DRV GlobalTypes marking meta information about an offer
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
   */
  public java.util.List<com.peakwork.api.accommodation.v1.common.GlobalType> getGlobalTypesList() {
    return globalTypes_;
  }
  /**
   * <pre>
   * optional - List of DRV GlobalTypes marking meta information about an offer
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
   */
  public java.util.List<? extends com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder> 
      getGlobalTypesOrBuilderList() {
    return globalTypes_;
  }
  /**
   * <pre>
   * optional - List of DRV GlobalTypes marking meta information about an offer
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
   */
  public int getGlobalTypesCount() {
    return globalTypes_.size();
  }
  /**
   * <pre>
   * optional - List of DRV GlobalTypes marking meta information about an offer
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
   */
  public com.peakwork.api.accommodation.v1.common.GlobalType getGlobalTypes(int index) {
    return globalTypes_.get(index);
  }
  /**
   * <pre>
   * optional - List of DRV GlobalTypes marking meta information about an offer
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
   */
  public com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder getGlobalTypesOrBuilder(
      int index) {
    return globalTypes_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    for (int i = 0; i < globalTypes_.size(); i++) {
      output.writeMessage(1, globalTypes_.get(i));
    }
    if (getPriceSetKeysList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(priceSetKeysMemoizedSerializedSize);
    }
    for (int i = 0; i < priceSetKeys_.size(); i++) {
      output.writeUInt32NoTag(priceSetKeys_.getInt(i));
    }
    if (objectPrice_ != 0D) {
      output.writeDouble(3, objectPrice_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < globalTypes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, globalTypes_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < priceSetKeys_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(priceSetKeys_.getInt(i));
      }
      size += dataSize;
      if (!getPriceSetKeysList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      priceSetKeysMemoizedSerializedSize = dataSize;
    }
    if (objectPrice_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(3, objectPrice_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.peakwork.api.accommodation.v1.offerdata.OfferValue)) {
      return super.equals(obj);
    }
    com.peakwork.api.accommodation.v1.offerdata.OfferValue other = (com.peakwork.api.accommodation.v1.offerdata.OfferValue) obj;

    if (java.lang.Double.doubleToLongBits(getObjectPrice())
        != java.lang.Double.doubleToLongBits(
            other.getObjectPrice())) return false;
    if (!getPriceSetKeysList()
        .equals(other.getPriceSetKeysList())) return false;
    if (!getGlobalTypesList()
        .equals(other.getGlobalTypesList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + OBJECT_PRICE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getObjectPrice()));
    if (getPriceSetKeysCount() > 0) {
      hash = (37 * hash) + PRICE_SET_KEYS_FIELD_NUMBER;
      hash = (53 * hash) + getPriceSetKeysList().hashCode();
    }
    if (getGlobalTypesCount() > 0) {
      hash = (37 * hash) + GLOBAL_TYPES_FIELD_NUMBER;
      hash = (53 * hash) + getGlobalTypesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.peakwork.api.accommodation.v1.offerdata.OfferValue prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Representation of the "value" of an offer. The value of an offer informs about the final price (and meta information)
   * of a travel with given criteria. I.e. given a combination of accommodation, rate, room, board, arrival date and LOS
   * there is exactly one OfferValue matching the criteria. From this OfferValue, that final price of the travel (offer)
   * can be calculated.
   * There are multiple ways to structure the price of an offer: either as a single final object price (object_price) or
   * as a complex pricing structure, that allows to set daily prices as well as person specific prices (price_set_keys).
   * It is not possible to use both "object_price" and "price_set_keys" at the same time, but it is mandatory to use one
   * of them.
   * </pre>
   *
   * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.OfferValue}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:peakwork.api.accommodation.v1.offerdata.OfferValue)
      com.peakwork.api.accommodation.v1.offerdata.OfferValueOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_OfferValue_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_OfferValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.peakwork.api.accommodation.v1.offerdata.OfferValue.class, com.peakwork.api.accommodation.v1.offerdata.OfferValue.Builder.class);
    }

    // Construct using com.peakwork.api.accommodation.v1.offerdata.OfferValue.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getGlobalTypesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      objectPrice_ = 0D;

      priceSetKeys_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000002);
      if (globalTypesBuilder_ == null) {
        globalTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        globalTypesBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_OfferValue_descriptor;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.OfferValue getDefaultInstanceForType() {
      return com.peakwork.api.accommodation.v1.offerdata.OfferValue.getDefaultInstance();
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.OfferValue build() {
      com.peakwork.api.accommodation.v1.offerdata.OfferValue result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.OfferValue buildPartial() {
      com.peakwork.api.accommodation.v1.offerdata.OfferValue result = new com.peakwork.api.accommodation.v1.offerdata.OfferValue(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.objectPrice_ = objectPrice_;
      if (((bitField0_ & 0x00000002) != 0)) {
        priceSetKeys_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.priceSetKeys_ = priceSetKeys_;
      if (globalTypesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          globalTypes_ = java.util.Collections.unmodifiableList(globalTypes_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.globalTypes_ = globalTypes_;
      } else {
        result.globalTypes_ = globalTypesBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.peakwork.api.accommodation.v1.offerdata.OfferValue) {
        return mergeFrom((com.peakwork.api.accommodation.v1.offerdata.OfferValue)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.peakwork.api.accommodation.v1.offerdata.OfferValue other) {
      if (other == com.peakwork.api.accommodation.v1.offerdata.OfferValue.getDefaultInstance()) return this;
      if (other.getObjectPrice() != 0D) {
        setObjectPrice(other.getObjectPrice());
      }
      if (!other.priceSetKeys_.isEmpty()) {
        if (priceSetKeys_.isEmpty()) {
          priceSetKeys_ = other.priceSetKeys_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensurePriceSetKeysIsMutable();
          priceSetKeys_.addAll(other.priceSetKeys_);
        }
        onChanged();
      }
      if (globalTypesBuilder_ == null) {
        if (!other.globalTypes_.isEmpty()) {
          if (globalTypes_.isEmpty()) {
            globalTypes_ = other.globalTypes_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureGlobalTypesIsMutable();
            globalTypes_.addAll(other.globalTypes_);
          }
          onChanged();
        }
      } else {
        if (!other.globalTypes_.isEmpty()) {
          if (globalTypesBuilder_.isEmpty()) {
            globalTypesBuilder_.dispose();
            globalTypesBuilder_ = null;
            globalTypes_ = other.globalTypes_;
            bitField0_ = (bitField0_ & ~0x00000004);
            globalTypesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getGlobalTypesFieldBuilder() : null;
          } else {
            globalTypesBuilder_.addAllMessages(other.globalTypes_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.peakwork.api.accommodation.v1.offerdata.OfferValue parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.peakwork.api.accommodation.v1.offerdata.OfferValue) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private double objectPrice_ ;
    /**
     * <pre>
     * optional - Holds a single final price for the offer. One of object_price or price_set_keys must be used.
     * It is the easiest form of an offer price. Example: if the object_price is 50 for a given combination of
     * accommodation, rate, room, board, arrival date and LOS and the currency is set to EUR, that exact offer costs 50â‚¬
     * and no further price calculation is required.
     * </pre>
     *
     * <code>double object_price = 3;</code>
     */
    public double getObjectPrice() {
      return objectPrice_;
    }
    /**
     * <pre>
     * optional - Holds a single final price for the offer. One of object_price or price_set_keys must be used.
     * It is the easiest form of an offer price. Example: if the object_price is 50 for a given combination of
     * accommodation, rate, room, board, arrival date and LOS and the currency is set to EUR, that exact offer costs 50â‚¬
     * and no further price calculation is required.
     * </pre>
     *
     * <code>double object_price = 3;</code>
     */
    public Builder setObjectPrice(double value) {
      
      objectPrice_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - Holds a single final price for the offer. One of object_price or price_set_keys must be used.
     * It is the easiest form of an offer price. Example: if the object_price is 50 for a given combination of
     * accommodation, rate, room, board, arrival date and LOS and the currency is set to EUR, that exact offer costs 50â‚¬
     * and no further price calculation is required.
     * </pre>
     *
     * <code>double object_price = 3;</code>
     */
    public Builder clearObjectPrice() {
      
      objectPrice_ = 0D;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList priceSetKeys_ = emptyIntList();
    private void ensurePriceSetKeysIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        priceSetKeys_ = mutableCopy(priceSetKeys_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * optional - Used to represent a complex pricing structure using daily and person specific prices.
     * One of price_set_keys or object_price must be used.
     * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
     * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
     * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
     * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
     * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
     * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
     * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
     * price for each consecutive day of the stay, starting with the first.
     * Price sets can also be referenced multiple times. Example:
     * - Position 0: PriceSet A -&gt; Base price
     * - Position 1: PriceSet B -&gt; Day 1
     * - Position 2: PriceSet B -&gt; Day 2
     * - Position 3: PriceSet C -&gt; Day 3
     * - Position 4: PriceSet D -&gt; Day 4
     * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
     * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
     * (PriceSet A + 2*PriceSet B + PriceSet C).
     * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
     * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
     * and summing up the price sets up to different lengths of the list.
     * See PriceSet for how to calculate the price of a single price set.
     * </pre>
     *
     * <code>repeated uint32 price_set_keys = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getPriceSetKeysList() {
      return ((bitField0_ & 0x00000002) != 0) ?
               java.util.Collections.unmodifiableList(priceSetKeys_) : priceSetKeys_;
    }
    /**
     * <pre>
     * optional - Used to represent a complex pricing structure using daily and person specific prices.
     * One of price_set_keys or object_price must be used.
     * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
     * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
     * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
     * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
     * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
     * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
     * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
     * price for each consecutive day of the stay, starting with the first.
     * Price sets can also be referenced multiple times. Example:
     * - Position 0: PriceSet A -&gt; Base price
     * - Position 1: PriceSet B -&gt; Day 1
     * - Position 2: PriceSet B -&gt; Day 2
     * - Position 3: PriceSet C -&gt; Day 3
     * - Position 4: PriceSet D -&gt; Day 4
     * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
     * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
     * (PriceSet A + 2*PriceSet B + PriceSet C).
     * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
     * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
     * and summing up the price sets up to different lengths of the list.
     * See PriceSet for how to calculate the price of a single price set.
     * </pre>
     *
     * <code>repeated uint32 price_set_keys = 2;</code>
     */
    public int getPriceSetKeysCount() {
      return priceSetKeys_.size();
    }
    /**
     * <pre>
     * optional - Used to represent a complex pricing structure using daily and person specific prices.
     * One of price_set_keys or object_price must be used.
     * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
     * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
     * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
     * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
     * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
     * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
     * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
     * price for each consecutive day of the stay, starting with the first.
     * Price sets can also be referenced multiple times. Example:
     * - Position 0: PriceSet A -&gt; Base price
     * - Position 1: PriceSet B -&gt; Day 1
     * - Position 2: PriceSet B -&gt; Day 2
     * - Position 3: PriceSet C -&gt; Day 3
     * - Position 4: PriceSet D -&gt; Day 4
     * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
     * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
     * (PriceSet A + 2*PriceSet B + PriceSet C).
     * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
     * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
     * and summing up the price sets up to different lengths of the list.
     * See PriceSet for how to calculate the price of a single price set.
     * </pre>
     *
     * <code>repeated uint32 price_set_keys = 2;</code>
     */
    public int getPriceSetKeys(int index) {
      return priceSetKeys_.getInt(index);
    }
    /**
     * <pre>
     * optional - Used to represent a complex pricing structure using daily and person specific prices.
     * One of price_set_keys or object_price must be used.
     * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
     * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
     * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
     * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
     * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
     * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
     * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
     * price for each consecutive day of the stay, starting with the first.
     * Price sets can also be referenced multiple times. Example:
     * - Position 0: PriceSet A -&gt; Base price
     * - Position 1: PriceSet B -&gt; Day 1
     * - Position 2: PriceSet B -&gt; Day 2
     * - Position 3: PriceSet C -&gt; Day 3
     * - Position 4: PriceSet D -&gt; Day 4
     * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
     * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
     * (PriceSet A + 2*PriceSet B + PriceSet C).
     * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
     * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
     * and summing up the price sets up to different lengths of the list.
     * See PriceSet for how to calculate the price of a single price set.
     * </pre>
     *
     * <code>repeated uint32 price_set_keys = 2;</code>
     */
    public Builder setPriceSetKeys(
        int index, int value) {
      ensurePriceSetKeysIsMutable();
      priceSetKeys_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - Used to represent a complex pricing structure using daily and person specific prices.
     * One of price_set_keys or object_price must be used.
     * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
     * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
     * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
     * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
     * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
     * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
     * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
     * price for each consecutive day of the stay, starting with the first.
     * Price sets can also be referenced multiple times. Example:
     * - Position 0: PriceSet A -&gt; Base price
     * - Position 1: PriceSet B -&gt; Day 1
     * - Position 2: PriceSet B -&gt; Day 2
     * - Position 3: PriceSet C -&gt; Day 3
     * - Position 4: PriceSet D -&gt; Day 4
     * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
     * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
     * (PriceSet A + 2*PriceSet B + PriceSet C).
     * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
     * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
     * and summing up the price sets up to different lengths of the list.
     * See PriceSet for how to calculate the price of a single price set.
     * </pre>
     *
     * <code>repeated uint32 price_set_keys = 2;</code>
     */
    public Builder addPriceSetKeys(int value) {
      ensurePriceSetKeysIsMutable();
      priceSetKeys_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - Used to represent a complex pricing structure using daily and person specific prices.
     * One of price_set_keys or object_price must be used.
     * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
     * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
     * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
     * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
     * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
     * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
     * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
     * price for each consecutive day of the stay, starting with the first.
     * Price sets can also be referenced multiple times. Example:
     * - Position 0: PriceSet A -&gt; Base price
     * - Position 1: PriceSet B -&gt; Day 1
     * - Position 2: PriceSet B -&gt; Day 2
     * - Position 3: PriceSet C -&gt; Day 3
     * - Position 4: PriceSet D -&gt; Day 4
     * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
     * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
     * (PriceSet A + 2*PriceSet B + PriceSet C).
     * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
     * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
     * and summing up the price sets up to different lengths of the list.
     * See PriceSet for how to calculate the price of a single price set.
     * </pre>
     *
     * <code>repeated uint32 price_set_keys = 2;</code>
     */
    public Builder addAllPriceSetKeys(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensurePriceSetKeysIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, priceSetKeys_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - Used to represent a complex pricing structure using daily and person specific prices.
     * One of price_set_keys or object_price must be used.
     * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
     * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
     * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
     * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
     * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
     * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
     * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
     * price for each consecutive day of the stay, starting with the first.
     * Price sets can also be referenced multiple times. Example:
     * - Position 0: PriceSet A -&gt; Base price
     * - Position 1: PriceSet B -&gt; Day 1
     * - Position 2: PriceSet B -&gt; Day 2
     * - Position 3: PriceSet C -&gt; Day 3
     * - Position 4: PriceSet D -&gt; Day 4
     * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
     * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
     * (PriceSet A + 2*PriceSet B + PriceSet C).
     * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
     * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
     * and summing up the price sets up to different lengths of the list.
     * See PriceSet for how to calculate the price of a single price set.
     * </pre>
     *
     * <code>repeated uint32 price_set_keys = 2;</code>
     */
    public Builder clearPriceSetKeys() {
      priceSetKeys_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private java.util.List<com.peakwork.api.accommodation.v1.common.GlobalType> globalTypes_ =
      java.util.Collections.emptyList();
    private void ensureGlobalTypesIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        globalTypes_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.common.GlobalType>(globalTypes_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.common.GlobalType, com.peakwork.api.accommodation.v1.common.GlobalType.Builder, com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder> globalTypesBuilder_;

    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.common.GlobalType> getGlobalTypesList() {
      if (globalTypesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(globalTypes_);
      } else {
        return globalTypesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public int getGlobalTypesCount() {
      if (globalTypesBuilder_ == null) {
        return globalTypes_.size();
      } else {
        return globalTypesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public com.peakwork.api.accommodation.v1.common.GlobalType getGlobalTypes(int index) {
      if (globalTypesBuilder_ == null) {
        return globalTypes_.get(index);
      } else {
        return globalTypesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public Builder setGlobalTypes(
        int index, com.peakwork.api.accommodation.v1.common.GlobalType value) {
      if (globalTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGlobalTypesIsMutable();
        globalTypes_.set(index, value);
        onChanged();
      } else {
        globalTypesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public Builder setGlobalTypes(
        int index, com.peakwork.api.accommodation.v1.common.GlobalType.Builder builderForValue) {
      if (globalTypesBuilder_ == null) {
        ensureGlobalTypesIsMutable();
        globalTypes_.set(index, builderForValue.build());
        onChanged();
      } else {
        globalTypesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public Builder addGlobalTypes(com.peakwork.api.accommodation.v1.common.GlobalType value) {
      if (globalTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGlobalTypesIsMutable();
        globalTypes_.add(value);
        onChanged();
      } else {
        globalTypesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public Builder addGlobalTypes(
        int index, com.peakwork.api.accommodation.v1.common.GlobalType value) {
      if (globalTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGlobalTypesIsMutable();
        globalTypes_.add(index, value);
        onChanged();
      } else {
        globalTypesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public Builder addGlobalTypes(
        com.peakwork.api.accommodation.v1.common.GlobalType.Builder builderForValue) {
      if (globalTypesBuilder_ == null) {
        ensureGlobalTypesIsMutable();
        globalTypes_.add(builderForValue.build());
        onChanged();
      } else {
        globalTypesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public Builder addGlobalTypes(
        int index, com.peakwork.api.accommodation.v1.common.GlobalType.Builder builderForValue) {
      if (globalTypesBuilder_ == null) {
        ensureGlobalTypesIsMutable();
        globalTypes_.add(index, builderForValue.build());
        onChanged();
      } else {
        globalTypesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public Builder addAllGlobalTypes(
        java.lang.Iterable<? extends com.peakwork.api.accommodation.v1.common.GlobalType> values) {
      if (globalTypesBuilder_ == null) {
        ensureGlobalTypesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, globalTypes_);
        onChanged();
      } else {
        globalTypesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public Builder clearGlobalTypes() {
      if (globalTypesBuilder_ == null) {
        globalTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        globalTypesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public Builder removeGlobalTypes(int index) {
      if (globalTypesBuilder_ == null) {
        ensureGlobalTypesIsMutable();
        globalTypes_.remove(index);
        onChanged();
      } else {
        globalTypesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public com.peakwork.api.accommodation.v1.common.GlobalType.Builder getGlobalTypesBuilder(
        int index) {
      return getGlobalTypesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder getGlobalTypesOrBuilder(
        int index) {
      if (globalTypesBuilder_ == null) {
        return globalTypes_.get(index);  } else {
        return globalTypesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public java.util.List<? extends com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder> 
         getGlobalTypesOrBuilderList() {
      if (globalTypesBuilder_ != null) {
        return globalTypesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(globalTypes_);
      }
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public com.peakwork.api.accommodation.v1.common.GlobalType.Builder addGlobalTypesBuilder() {
      return getGlobalTypesFieldBuilder().addBuilder(
          com.peakwork.api.accommodation.v1.common.GlobalType.getDefaultInstance());
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public com.peakwork.api.accommodation.v1.common.GlobalType.Builder addGlobalTypesBuilder(
        int index) {
      return getGlobalTypesFieldBuilder().addBuilder(
          index, com.peakwork.api.accommodation.v1.common.GlobalType.getDefaultInstance());
    }
    /**
     * <pre>
     * optional - List of DRV GlobalTypes marking meta information about an offer
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.common.GlobalType.Builder> 
         getGlobalTypesBuilderList() {
      return getGlobalTypesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.common.GlobalType, com.peakwork.api.accommodation.v1.common.GlobalType.Builder, com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder> 
        getGlobalTypesFieldBuilder() {
      if (globalTypesBuilder_ == null) {
        globalTypesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.peakwork.api.accommodation.v1.common.GlobalType, com.peakwork.api.accommodation.v1.common.GlobalType.Builder, com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder>(
                globalTypes_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        globalTypes_ = null;
      }
      return globalTypesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:peakwork.api.accommodation.v1.offerdata.OfferValue)
  }

  // @@protoc_insertion_point(class_scope:peakwork.api.accommodation.v1.offerdata.OfferValue)
  private static final com.peakwork.api.accommodation.v1.offerdata.OfferValue DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.peakwork.api.accommodation.v1.offerdata.OfferValue();
  }

  public static com.peakwork.api.accommodation.v1.offerdata.OfferValue getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<OfferValue>
      PARSER = new com.google.protobuf.AbstractParser<OfferValue>() {
    @java.lang.Override
    public OfferValue parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new OfferValue(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<OfferValue> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<OfferValue> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.peakwork.api.accommodation.v1.offerdata.OfferValue getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

