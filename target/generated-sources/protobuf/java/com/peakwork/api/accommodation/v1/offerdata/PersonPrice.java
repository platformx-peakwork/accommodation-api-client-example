// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offerdata.proto

package com.peakwork.api.accommodation.v1.offerdata;

/**
 * <pre>
 * Representation of a price, that is valid for a certain set of persons, i.e. persons matching certain criteria.
 * </pre>
 *
 * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.PersonPrice}
 */
public  final class PersonPrice extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:peakwork.api.accommodation.v1.offerdata.PersonPrice)
    PersonPriceOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PersonPrice.newBuilder() to construct.
  private PersonPrice(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PersonPrice() {
    personFilters_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PersonPrice(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 9: {

            personPrice_ = input.readDouble();
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              personFilters_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.PersonFilter>();
              mutable_bitField0_ |= 0x00000002;
            }
            personFilters_.add(
                input.readMessage(com.peakwork.api.accommodation.v1.offerdata.PersonFilter.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        personFilters_ = java.util.Collections.unmodifiableList(personFilters_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PersonPrice_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PersonPrice_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.peakwork.api.accommodation.v1.offerdata.PersonPrice.class, com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder.class);
  }

  private int bitField0_;
  public static final int PERSON_PRICE_FIELD_NUMBER = 1;
  private double personPrice_;
  /**
   * <pre>
   * optional - default: 0 - The price, that applies to the set of persons given by the person filters.
   * </pre>
   *
   * <code>double person_price = 1;</code>
   */
  public double getPersonPrice() {
    return personPrice_;
  }

  public static final int PERSON_FILTERS_FIELD_NUMBER = 2;
  private java.util.List<com.peakwork.api.accommodation.v1.offerdata.PersonFilter> personFilters_;
  /**
   * <pre>
   * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
   * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
   * PersonFilter on when a PersonFilter applies to a person.
   * If not given, the price is valid for all persons.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
   */
  public java.util.List<com.peakwork.api.accommodation.v1.offerdata.PersonFilter> getPersonFiltersList() {
    return personFilters_;
  }
  /**
   * <pre>
   * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
   * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
   * PersonFilter on when a PersonFilter applies to a person.
   * If not given, the price is valid for all persons.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
   */
  public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.PersonFilterOrBuilder> 
      getPersonFiltersOrBuilderList() {
    return personFilters_;
  }
  /**
   * <pre>
   * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
   * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
   * PersonFilter on when a PersonFilter applies to a person.
   * If not given, the price is valid for all persons.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
   */
  public int getPersonFiltersCount() {
    return personFilters_.size();
  }
  /**
   * <pre>
   * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
   * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
   * PersonFilter on when a PersonFilter applies to a person.
   * If not given, the price is valid for all persons.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.PersonFilter getPersonFilters(int index) {
    return personFilters_.get(index);
  }
  /**
   * <pre>
   * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
   * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
   * PersonFilter on when a PersonFilter applies to a person.
   * If not given, the price is valid for all persons.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.PersonFilterOrBuilder getPersonFiltersOrBuilder(
      int index) {
    return personFilters_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (personPrice_ != 0D) {
      output.writeDouble(1, personPrice_);
    }
    for (int i = 0; i < personFilters_.size(); i++) {
      output.writeMessage(2, personFilters_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (personPrice_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(1, personPrice_);
    }
    for (int i = 0; i < personFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, personFilters_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.peakwork.api.accommodation.v1.offerdata.PersonPrice)) {
      return super.equals(obj);
    }
    com.peakwork.api.accommodation.v1.offerdata.PersonPrice other = (com.peakwork.api.accommodation.v1.offerdata.PersonPrice) obj;

    if (java.lang.Double.doubleToLongBits(getPersonPrice())
        != java.lang.Double.doubleToLongBits(
            other.getPersonPrice())) return false;
    if (!getPersonFiltersList()
        .equals(other.getPersonFiltersList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PERSON_PRICE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getPersonPrice()));
    if (getPersonFiltersCount() > 0) {
      hash = (37 * hash) + PERSON_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getPersonFiltersList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.peakwork.api.accommodation.v1.offerdata.PersonPrice prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Representation of a price, that is valid for a certain set of persons, i.e. persons matching certain criteria.
   * </pre>
   *
   * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.PersonPrice}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:peakwork.api.accommodation.v1.offerdata.PersonPrice)
      com.peakwork.api.accommodation.v1.offerdata.PersonPriceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PersonPrice_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PersonPrice_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.peakwork.api.accommodation.v1.offerdata.PersonPrice.class, com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder.class);
    }

    // Construct using com.peakwork.api.accommodation.v1.offerdata.PersonPrice.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPersonFiltersFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      personPrice_ = 0D;

      if (personFiltersBuilder_ == null) {
        personFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        personFiltersBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PersonPrice_descriptor;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.PersonPrice getDefaultInstanceForType() {
      return com.peakwork.api.accommodation.v1.offerdata.PersonPrice.getDefaultInstance();
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.PersonPrice build() {
      com.peakwork.api.accommodation.v1.offerdata.PersonPrice result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.PersonPrice buildPartial() {
      com.peakwork.api.accommodation.v1.offerdata.PersonPrice result = new com.peakwork.api.accommodation.v1.offerdata.PersonPrice(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.personPrice_ = personPrice_;
      if (personFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          personFilters_ = java.util.Collections.unmodifiableList(personFilters_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.personFilters_ = personFilters_;
      } else {
        result.personFilters_ = personFiltersBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.peakwork.api.accommodation.v1.offerdata.PersonPrice) {
        return mergeFrom((com.peakwork.api.accommodation.v1.offerdata.PersonPrice)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.peakwork.api.accommodation.v1.offerdata.PersonPrice other) {
      if (other == com.peakwork.api.accommodation.v1.offerdata.PersonPrice.getDefaultInstance()) return this;
      if (other.getPersonPrice() != 0D) {
        setPersonPrice(other.getPersonPrice());
      }
      if (personFiltersBuilder_ == null) {
        if (!other.personFilters_.isEmpty()) {
          if (personFilters_.isEmpty()) {
            personFilters_ = other.personFilters_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensurePersonFiltersIsMutable();
            personFilters_.addAll(other.personFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.personFilters_.isEmpty()) {
          if (personFiltersBuilder_.isEmpty()) {
            personFiltersBuilder_.dispose();
            personFiltersBuilder_ = null;
            personFilters_ = other.personFilters_;
            bitField0_ = (bitField0_ & ~0x00000002);
            personFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPersonFiltersFieldBuilder() : null;
          } else {
            personFiltersBuilder_.addAllMessages(other.personFilters_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.peakwork.api.accommodation.v1.offerdata.PersonPrice parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.peakwork.api.accommodation.v1.offerdata.PersonPrice) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private double personPrice_ ;
    /**
     * <pre>
     * optional - default: 0 - The price, that applies to the set of persons given by the person filters.
     * </pre>
     *
     * <code>double person_price = 1;</code>
     */
    public double getPersonPrice() {
      return personPrice_;
    }
    /**
     * <pre>
     * optional - default: 0 - The price, that applies to the set of persons given by the person filters.
     * </pre>
     *
     * <code>double person_price = 1;</code>
     */
    public Builder setPersonPrice(double value) {
      
      personPrice_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - default: 0 - The price, that applies to the set of persons given by the person filters.
     * </pre>
     *
     * <code>double person_price = 1;</code>
     */
    public Builder clearPersonPrice() {
      
      personPrice_ = 0D;
      onChanged();
      return this;
    }

    private java.util.List<com.peakwork.api.accommodation.v1.offerdata.PersonFilter> personFilters_ =
      java.util.Collections.emptyList();
    private void ensurePersonFiltersIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        personFilters_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.PersonFilter>(personFilters_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.PersonFilter, com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder, com.peakwork.api.accommodation.v1.offerdata.PersonFilterOrBuilder> personFiltersBuilder_;

    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.PersonFilter> getPersonFiltersList() {
      if (personFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(personFilters_);
      } else {
        return personFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public int getPersonFiltersCount() {
      if (personFiltersBuilder_ == null) {
        return personFilters_.size();
      } else {
        return personFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PersonFilter getPersonFilters(int index) {
      if (personFiltersBuilder_ == null) {
        return personFilters_.get(index);
      } else {
        return personFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public Builder setPersonFilters(
        int index, com.peakwork.api.accommodation.v1.offerdata.PersonFilter value) {
      if (personFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePersonFiltersIsMutable();
        personFilters_.set(index, value);
        onChanged();
      } else {
        personFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public Builder setPersonFilters(
        int index, com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder builderForValue) {
      if (personFiltersBuilder_ == null) {
        ensurePersonFiltersIsMutable();
        personFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        personFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public Builder addPersonFilters(com.peakwork.api.accommodation.v1.offerdata.PersonFilter value) {
      if (personFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePersonFiltersIsMutable();
        personFilters_.add(value);
        onChanged();
      } else {
        personFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public Builder addPersonFilters(
        int index, com.peakwork.api.accommodation.v1.offerdata.PersonFilter value) {
      if (personFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePersonFiltersIsMutable();
        personFilters_.add(index, value);
        onChanged();
      } else {
        personFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public Builder addPersonFilters(
        com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder builderForValue) {
      if (personFiltersBuilder_ == null) {
        ensurePersonFiltersIsMutable();
        personFilters_.add(builderForValue.build());
        onChanged();
      } else {
        personFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public Builder addPersonFilters(
        int index, com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder builderForValue) {
      if (personFiltersBuilder_ == null) {
        ensurePersonFiltersIsMutable();
        personFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        personFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public Builder addAllPersonFilters(
        java.lang.Iterable<? extends com.peakwork.api.accommodation.v1.offerdata.PersonFilter> values) {
      if (personFiltersBuilder_ == null) {
        ensurePersonFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, personFilters_);
        onChanged();
      } else {
        personFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public Builder clearPersonFilters() {
      if (personFiltersBuilder_ == null) {
        personFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        personFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public Builder removePersonFilters(int index) {
      if (personFiltersBuilder_ == null) {
        ensurePersonFiltersIsMutable();
        personFilters_.remove(index);
        onChanged();
      } else {
        personFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder getPersonFiltersBuilder(
        int index) {
      return getPersonFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PersonFilterOrBuilder getPersonFiltersOrBuilder(
        int index) {
      if (personFiltersBuilder_ == null) {
        return personFilters_.get(index);  } else {
        return personFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.PersonFilterOrBuilder> 
         getPersonFiltersOrBuilderList() {
      if (personFiltersBuilder_ != null) {
        return personFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(personFilters_);
      }
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder addPersonFiltersBuilder() {
      return getPersonFiltersFieldBuilder().addBuilder(
          com.peakwork.api.accommodation.v1.offerdata.PersonFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder addPersonFiltersBuilder(
        int index) {
      return getPersonFiltersFieldBuilder().addBuilder(
          index, com.peakwork.api.accommodation.v1.offerdata.PersonFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * optional - List of person filters, which constitutes the set of persons, that the given price is applied to. The
     * PersonPrice applies to a given person, if at least 1 of the PersonFilter entries applies to the person. See
     * PersonFilter on when a PersonFilter applies to a person.
     * If not given, the price is valid for all persons.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonFilter person_filters = 2;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder> 
         getPersonFiltersBuilderList() {
      return getPersonFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.PersonFilter, com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder, com.peakwork.api.accommodation.v1.offerdata.PersonFilterOrBuilder> 
        getPersonFiltersFieldBuilder() {
      if (personFiltersBuilder_ == null) {
        personFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.peakwork.api.accommodation.v1.offerdata.PersonFilter, com.peakwork.api.accommodation.v1.offerdata.PersonFilter.Builder, com.peakwork.api.accommodation.v1.offerdata.PersonFilterOrBuilder>(
                personFilters_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        personFilters_ = null;
      }
      return personFiltersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:peakwork.api.accommodation.v1.offerdata.PersonPrice)
  }

  // @@protoc_insertion_point(class_scope:peakwork.api.accommodation.v1.offerdata.PersonPrice)
  private static final com.peakwork.api.accommodation.v1.offerdata.PersonPrice DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.peakwork.api.accommodation.v1.offerdata.PersonPrice();
  }

  public static com.peakwork.api.accommodation.v1.offerdata.PersonPrice getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PersonPrice>
      PARSER = new com.google.protobuf.AbstractParser<PersonPrice>() {
    @java.lang.Override
    public PersonPrice parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PersonPrice(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PersonPrice> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PersonPrice> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.peakwork.api.accommodation.v1.offerdata.PersonPrice getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

