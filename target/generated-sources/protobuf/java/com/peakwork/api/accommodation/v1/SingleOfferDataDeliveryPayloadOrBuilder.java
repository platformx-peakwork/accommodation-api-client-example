// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accommodation-api.proto

package com.peakwork.api.accommodation.v1;

public interface SingleOfferDataDeliveryPayloadOrBuilder extends
    // @@protoc_insertion_point(interface_extends:peakwork.api.accommodation.v1.SingleOfferDataDeliveryPayload)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * mandatory - Identifier for the accommodation used by the supplier. This identifier references an accommodation
   * entity (supplierAccommodationId) from the BaseDataService. See supplierAccommodationId of Accommodation.
   * The offer information of this message is valid for the referenced accommodation only.
   * </pre>
   *
   * <code>string accommodation_identifier = 1;</code>
   */
  java.lang.String getAccommodationIdentifier();
  /**
   * <pre>
   * mandatory - Identifier for the accommodation used by the supplier. This identifier references an accommodation
   * entity (supplierAccommodationId) from the BaseDataService. See supplierAccommodationId of Accommodation.
   * The offer information of this message is valid for the referenced accommodation only.
   * </pre>
   *
   * <code>string accommodation_identifier = 1;</code>
   */
  com.google.protobuf.ByteString
      getAccommodationIdentifierBytes();

  /**
   * <pre>
   * mandatory - Identifier for the rate used by the supplier. This identifier references a rate
   * entity (rateIdentifier) from the BaseDataService. See rateIdentifier of Rate.
   * The offer information of this message is valid for the referenced rate only.
   * </pre>
   *
   * <code>string rate_identifier = 4;</code>
   */
  java.lang.String getRateIdentifier();
  /**
   * <pre>
   * mandatory - Identifier for the rate used by the supplier. This identifier references a rate
   * entity (rateIdentifier) from the BaseDataService. See rateIdentifier of Rate.
   * The offer information of this message is valid for the referenced rate only.
   * </pre>
   *
   * <code>string rate_identifier = 4;</code>
   */
  com.google.protobuf.ByteString
      getRateIdentifierBytes();

  /**
   * <pre>
   * mandatory - Identifier for the room used by the supplier. This identifier references a room
   * entity (roomIdentifier) from the BaseDataService. See roomIdentifier of Room.
   * The offer information of this message is valid for the referenced room only.
   * </pre>
   *
   * <code>string room_identifier = 2;</code>
   */
  java.lang.String getRoomIdentifier();
  /**
   * <pre>
   * mandatory - Identifier for the room used by the supplier. This identifier references a room
   * entity (roomIdentifier) from the BaseDataService. See roomIdentifier of Room.
   * The offer information of this message is valid for the referenced room only.
   * </pre>
   *
   * <code>string room_identifier = 2;</code>
   */
  com.google.protobuf.ByteString
      getRoomIdentifierBytes();

  /**
   * <pre>
   * mandatory - Identifier for the board used by the supplier. This identifier references a board
   * entity (boardIdentifier) from the BaseDataService. See boardIdentifier of Board.
   * The offer information of this message is valid for the referenced board only.
   * </pre>
   *
   * <code>string board_identifier = 3;</code>
   */
  java.lang.String getBoardIdentifier();
  /**
   * <pre>
   * mandatory - Identifier for the board used by the supplier. This identifier references a board
   * entity (boardIdentifier) from the BaseDataService. See boardIdentifier of Board.
   * The offer information of this message is valid for the referenced board only.
   * </pre>
   *
   * <code>string board_identifier = 3;</code>
   */
  com.google.protobuf.ByteString
      getBoardIdentifierBytes();

  /**
   * <pre>
   * mandatory - The arrival date, that the offer information is valid for. The prices will only be changed for the
   * given arrival date.
   * </pre>
   *
   * <code>.google.type.Date arrivalDate = 5;</code>
   */
  boolean hasArrivalDate();
  /**
   * <pre>
   * mandatory - The arrival date, that the offer information is valid for. The prices will only be changed for the
   * given arrival date.
   * </pre>
   *
   * <code>.google.type.Date arrivalDate = 5;</code>
   */
  com.google.type.Date getArrivalDate();
  /**
   * <pre>
   * mandatory - The arrival date, that the offer information is valid for. The prices will only be changed for the
   * given arrival date.
   * </pre>
   *
   * <code>.google.type.Date arrivalDate = 5;</code>
   */
  com.google.type.DateOrBuilder getArrivalDateOrBuilder();

  /**
   * <pre>
   * mandatory - The lengths of stay (LOSs), that the offer information is valid for. The prices will only be changed for the
   * given length of stay.
   * </pre>
   *
   * <code>uint32 los = 6;</code>
   */
  int getLos();

  /**
   * <pre>
   * mandatory - The offer information including most importantly the price information about the single offer. The
   * offer information is valid only for the given key combination of accommodation, rate, room, board, arrival date and
   * length of stay. The offer value contains price information in form of references to price_sets.
   * See OfferValue for more details.
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.offerdata.OfferValue offer_value = 7;</code>
   */
  boolean hasOfferValue();
  /**
   * <pre>
   * mandatory - The offer information including most importantly the price information about the single offer. The
   * offer information is valid only for the given key combination of accommodation, rate, room, board, arrival date and
   * length of stay. The offer value contains price information in form of references to price_sets.
   * See OfferValue for more details.
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.offerdata.OfferValue offer_value = 7;</code>
   */
  com.peakwork.api.accommodation.v1.offerdata.OfferValue getOfferValue();
  /**
   * <pre>
   * mandatory - The offer information including most importantly the price information about the single offer. The
   * offer information is valid only for the given key combination of accommodation, rate, room, board, arrival date and
   * length of stay. The offer value contains price information in form of references to price_sets.
   * See OfferValue for more details.
   * </pre>
   *
   * <code>.peakwork.api.accommodation.v1.offerdata.OfferValue offer_value = 7;</code>
   */
  com.peakwork.api.accommodation.v1.offerdata.OfferValueOrBuilder getOfferValueOrBuilder();

  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the offer_value via a
   * unique numeric key (uint32). This key is bound to a specific message and can be arbitrarily chosen. This means
   * a key for a price set in one message can be different for the same price set in a different message. It does not
   * serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times from an offer_value in order to reuse the pricing structure in it. The
   * purpose is to optimize the data size by not duplicating the same price data multiple times (e.g. for the same
   * price on consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 8;</code>
   */
  int getPriceSetsCount();
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the offer_value via a
   * unique numeric key (uint32). This key is bound to a specific message and can be arbitrarily chosen. This means
   * a key for a price set in one message can be different for the same price set in a different message. It does not
   * serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times from an offer_value in order to reuse the pricing structure in it. The
   * purpose is to optimize the data size by not duplicating the same price data multiple times (e.g. for the same
   * price on consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 8;</code>
   */
  boolean containsPriceSets(
      int key);
  /**
   * Use {@link #getPriceSetsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet>
  getPriceSets();
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the offer_value via a
   * unique numeric key (uint32). This key is bound to a specific message and can be arbitrarily chosen. This means
   * a key for a price set in one message can be different for the same price set in a different message. It does not
   * serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times from an offer_value in order to reuse the pricing structure in it. The
   * purpose is to optimize the data size by not duplicating the same price data multiple times (e.g. for the same
   * price on consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 8;</code>
   */
  java.util.Map<java.lang.Integer, com.peakwork.api.accommodation.v1.offerdata.PriceSet>
  getPriceSetsMap();
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the offer_value via a
   * unique numeric key (uint32). This key is bound to a specific message and can be arbitrarily chosen. This means
   * a key for a price set in one message can be different for the same price set in a different message. It does not
   * serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times from an offer_value in order to reuse the pricing structure in it. The
   * purpose is to optimize the data size by not duplicating the same price data multiple times (e.g. for the same
   * price on consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 8;</code>
   */

  com.peakwork.api.accommodation.v1.offerdata.PriceSet getPriceSetsOrDefault(
      int key,
      com.peakwork.api.accommodation.v1.offerdata.PriceSet defaultValue);
  /**
   * <pre>
   * mandatory - Map of all PriceSets used in this message. The price sets are referenced by the offer_value via a
   * unique numeric key (uint32). This key is bound to a specific message and can be arbitrarily chosen. This means
   * a key for a price set in one message can be different for the same price set in a different message. It does not
   * serve as a permanent identifier of a price set.
   * A price set can be referenced multiple times from an offer_value in order to reuse the pricing structure in it. The
   * purpose is to optimize the data size by not duplicating the same price data multiple times (e.g. for the same
   * price on consecutive days of the stay).
   * See PriceSet for more details.
   * </pre>
   *
   * <code>map&lt;uint32, .peakwork.api.accommodation.v1.offerdata.PriceSet&gt; price_sets = 8;</code>
   */

  com.peakwork.api.accommodation.v1.offerdata.PriceSet getPriceSetsOrThrow(
      int key);
}
