// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offerdata.proto

package com.peakwork.api.accommodation.v1.offerdata;

/**
 * <pre>
 * Represents a complex price structure composed out of an object price and person prices used as part of a complete
 * pricing structure for offers.
 * A PriceSet should contain at least 1 PersonPrice or an object_price, although both at the same time is possible.
 * In order to calculate the total price of a PriceSet, it is necessary to sum up the object price and all PersonPrices,
 * that apply to the given persons.
 * </pre>
 *
 * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.PriceSet}
 */
public  final class PriceSet extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:peakwork.api.accommodation.v1.offerdata.PriceSet)
    PriceSetOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PriceSet.newBuilder() to construct.
  private PriceSet(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PriceSet() {
    personPrices_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PriceSet(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 9: {

            objectPrice_ = input.readDouble();
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              personPrices_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.PersonPrice>();
              mutable_bitField0_ |= 0x00000002;
            }
            personPrices_.add(
                input.readMessage(com.peakwork.api.accommodation.v1.offerdata.PersonPrice.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        personPrices_ = java.util.Collections.unmodifiableList(personPrices_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PriceSet_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PriceSet_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.peakwork.api.accommodation.v1.offerdata.PriceSet.class, com.peakwork.api.accommodation.v1.offerdata.PriceSet.Builder.class);
  }

  private int bitField0_;
  public static final int OBJECT_PRICE_FIELD_NUMBER = 1;
  private double objectPrice_;
  /**
   * <pre>
   * optional - Object price component of the price set (if not given then there must be person prices defined). The
   * object price is valid for the whole object (accommodation/room/board) independent from which kind of persons
   * are traveling.
   * </pre>
   *
   * <code>double object_price = 1;</code>
   */
  public double getObjectPrice() {
    return objectPrice_;
  }

  public static final int PERSON_PRICES_FIELD_NUMBER = 2;
  private java.util.List<com.peakwork.api.accommodation.v1.offerdata.PersonPrice> personPrices_;
  /**
   * <pre>
   * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
   * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
   * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
   * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
   */
  public java.util.List<com.peakwork.api.accommodation.v1.offerdata.PersonPrice> getPersonPricesList() {
    return personPrices_;
  }
  /**
   * <pre>
   * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
   * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
   * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
   * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
   */
  public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.PersonPriceOrBuilder> 
      getPersonPricesOrBuilderList() {
    return personPrices_;
  }
  /**
   * <pre>
   * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
   * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
   * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
   * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
   */
  public int getPersonPricesCount() {
    return personPrices_.size();
  }
  /**
   * <pre>
   * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
   * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
   * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
   * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.PersonPrice getPersonPrices(int index) {
    return personPrices_.get(index);
  }
  /**
   * <pre>
   * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
   * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
   * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
   * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
   */
  public com.peakwork.api.accommodation.v1.offerdata.PersonPriceOrBuilder getPersonPricesOrBuilder(
      int index) {
    return personPrices_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (objectPrice_ != 0D) {
      output.writeDouble(1, objectPrice_);
    }
    for (int i = 0; i < personPrices_.size(); i++) {
      output.writeMessage(2, personPrices_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (objectPrice_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(1, objectPrice_);
    }
    for (int i = 0; i < personPrices_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, personPrices_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.peakwork.api.accommodation.v1.offerdata.PriceSet)) {
      return super.equals(obj);
    }
    com.peakwork.api.accommodation.v1.offerdata.PriceSet other = (com.peakwork.api.accommodation.v1.offerdata.PriceSet) obj;

    if (java.lang.Double.doubleToLongBits(getObjectPrice())
        != java.lang.Double.doubleToLongBits(
            other.getObjectPrice())) return false;
    if (!getPersonPricesList()
        .equals(other.getPersonPricesList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + OBJECT_PRICE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getObjectPrice()));
    if (getPersonPricesCount() > 0) {
      hash = (37 * hash) + PERSON_PRICES_FIELD_NUMBER;
      hash = (53 * hash) + getPersonPricesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.peakwork.api.accommodation.v1.offerdata.PriceSet prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Represents a complex price structure composed out of an object price and person prices used as part of a complete
   * pricing structure for offers.
   * A PriceSet should contain at least 1 PersonPrice or an object_price, although both at the same time is possible.
   * In order to calculate the total price of a PriceSet, it is necessary to sum up the object price and all PersonPrices,
   * that apply to the given persons.
   * </pre>
   *
   * Protobuf type {@code peakwork.api.accommodation.v1.offerdata.PriceSet}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:peakwork.api.accommodation.v1.offerdata.PriceSet)
      com.peakwork.api.accommodation.v1.offerdata.PriceSetOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PriceSet_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PriceSet_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.peakwork.api.accommodation.v1.offerdata.PriceSet.class, com.peakwork.api.accommodation.v1.offerdata.PriceSet.Builder.class);
    }

    // Construct using com.peakwork.api.accommodation.v1.offerdata.PriceSet.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPersonPricesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      objectPrice_ = 0D;

      if (personPricesBuilder_ == null) {
        personPrices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        personPricesBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.peakwork.api.accommodation.v1.offerdata.Offerdata.internal_static_peakwork_api_accommodation_v1_offerdata_PriceSet_descriptor;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.PriceSet getDefaultInstanceForType() {
      return com.peakwork.api.accommodation.v1.offerdata.PriceSet.getDefaultInstance();
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.PriceSet build() {
      com.peakwork.api.accommodation.v1.offerdata.PriceSet result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.peakwork.api.accommodation.v1.offerdata.PriceSet buildPartial() {
      com.peakwork.api.accommodation.v1.offerdata.PriceSet result = new com.peakwork.api.accommodation.v1.offerdata.PriceSet(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.objectPrice_ = objectPrice_;
      if (personPricesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          personPrices_ = java.util.Collections.unmodifiableList(personPrices_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.personPrices_ = personPrices_;
      } else {
        result.personPrices_ = personPricesBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.peakwork.api.accommodation.v1.offerdata.PriceSet) {
        return mergeFrom((com.peakwork.api.accommodation.v1.offerdata.PriceSet)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.peakwork.api.accommodation.v1.offerdata.PriceSet other) {
      if (other == com.peakwork.api.accommodation.v1.offerdata.PriceSet.getDefaultInstance()) return this;
      if (other.getObjectPrice() != 0D) {
        setObjectPrice(other.getObjectPrice());
      }
      if (personPricesBuilder_ == null) {
        if (!other.personPrices_.isEmpty()) {
          if (personPrices_.isEmpty()) {
            personPrices_ = other.personPrices_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensurePersonPricesIsMutable();
            personPrices_.addAll(other.personPrices_);
          }
          onChanged();
        }
      } else {
        if (!other.personPrices_.isEmpty()) {
          if (personPricesBuilder_.isEmpty()) {
            personPricesBuilder_.dispose();
            personPricesBuilder_ = null;
            personPrices_ = other.personPrices_;
            bitField0_ = (bitField0_ & ~0x00000002);
            personPricesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPersonPricesFieldBuilder() : null;
          } else {
            personPricesBuilder_.addAllMessages(other.personPrices_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.peakwork.api.accommodation.v1.offerdata.PriceSet parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.peakwork.api.accommodation.v1.offerdata.PriceSet) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private double objectPrice_ ;
    /**
     * <pre>
     * optional - Object price component of the price set (if not given then there must be person prices defined). The
     * object price is valid for the whole object (accommodation/room/board) independent from which kind of persons
     * are traveling.
     * </pre>
     *
     * <code>double object_price = 1;</code>
     */
    public double getObjectPrice() {
      return objectPrice_;
    }
    /**
     * <pre>
     * optional - Object price component of the price set (if not given then there must be person prices defined). The
     * object price is valid for the whole object (accommodation/room/board) independent from which kind of persons
     * are traveling.
     * </pre>
     *
     * <code>double object_price = 1;</code>
     */
    public Builder setObjectPrice(double value) {
      
      objectPrice_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional - Object price component of the price set (if not given then there must be person prices defined). The
     * object price is valid for the whole object (accommodation/room/board) independent from which kind of persons
     * are traveling.
     * </pre>
     *
     * <code>double object_price = 1;</code>
     */
    public Builder clearObjectPrice() {
      
      objectPrice_ = 0D;
      onChanged();
      return this;
    }

    private java.util.List<com.peakwork.api.accommodation.v1.offerdata.PersonPrice> personPrices_ =
      java.util.Collections.emptyList();
    private void ensurePersonPricesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        personPrices_ = new java.util.ArrayList<com.peakwork.api.accommodation.v1.offerdata.PersonPrice>(personPrices_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.PersonPrice, com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder, com.peakwork.api.accommodation.v1.offerdata.PersonPriceOrBuilder> personPricesBuilder_;

    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.PersonPrice> getPersonPricesList() {
      if (personPricesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(personPrices_);
      } else {
        return personPricesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public int getPersonPricesCount() {
      if (personPricesBuilder_ == null) {
        return personPrices_.size();
      } else {
        return personPricesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PersonPrice getPersonPrices(int index) {
      if (personPricesBuilder_ == null) {
        return personPrices_.get(index);
      } else {
        return personPricesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public Builder setPersonPrices(
        int index, com.peakwork.api.accommodation.v1.offerdata.PersonPrice value) {
      if (personPricesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePersonPricesIsMutable();
        personPrices_.set(index, value);
        onChanged();
      } else {
        personPricesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public Builder setPersonPrices(
        int index, com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder builderForValue) {
      if (personPricesBuilder_ == null) {
        ensurePersonPricesIsMutable();
        personPrices_.set(index, builderForValue.build());
        onChanged();
      } else {
        personPricesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public Builder addPersonPrices(com.peakwork.api.accommodation.v1.offerdata.PersonPrice value) {
      if (personPricesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePersonPricesIsMutable();
        personPrices_.add(value);
        onChanged();
      } else {
        personPricesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public Builder addPersonPrices(
        int index, com.peakwork.api.accommodation.v1.offerdata.PersonPrice value) {
      if (personPricesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePersonPricesIsMutable();
        personPrices_.add(index, value);
        onChanged();
      } else {
        personPricesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public Builder addPersonPrices(
        com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder builderForValue) {
      if (personPricesBuilder_ == null) {
        ensurePersonPricesIsMutable();
        personPrices_.add(builderForValue.build());
        onChanged();
      } else {
        personPricesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public Builder addPersonPrices(
        int index, com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder builderForValue) {
      if (personPricesBuilder_ == null) {
        ensurePersonPricesIsMutable();
        personPrices_.add(index, builderForValue.build());
        onChanged();
      } else {
        personPricesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public Builder addAllPersonPrices(
        java.lang.Iterable<? extends com.peakwork.api.accommodation.v1.offerdata.PersonPrice> values) {
      if (personPricesBuilder_ == null) {
        ensurePersonPricesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, personPrices_);
        onChanged();
      } else {
        personPricesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public Builder clearPersonPrices() {
      if (personPricesBuilder_ == null) {
        personPrices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        personPricesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public Builder removePersonPrices(int index) {
      if (personPricesBuilder_ == null) {
        ensurePersonPricesIsMutable();
        personPrices_.remove(index);
        onChanged();
      } else {
        personPricesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder getPersonPricesBuilder(
        int index) {
      return getPersonPricesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PersonPriceOrBuilder getPersonPricesOrBuilder(
        int index) {
      if (personPricesBuilder_ == null) {
        return personPrices_.get(index);  } else {
        return personPricesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public java.util.List<? extends com.peakwork.api.accommodation.v1.offerdata.PersonPriceOrBuilder> 
         getPersonPricesOrBuilderList() {
      if (personPricesBuilder_ != null) {
        return personPricesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(personPrices_);
      }
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder addPersonPricesBuilder() {
      return getPersonPricesFieldBuilder().addBuilder(
          com.peakwork.api.accommodation.v1.offerdata.PersonPrice.getDefaultInstance());
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder addPersonPricesBuilder(
        int index) {
      return getPersonPricesFieldBuilder().addBuilder(
          index, com.peakwork.api.accommodation.v1.offerdata.PersonPrice.getDefaultInstance());
    }
    /**
     * <pre>
     * optional - List of person prices, that have to be applied (if not given then there must be an object price defined).
     * For a given set of travelling persons with concrete ages, that an offer is searched for, all person prices have to
     * be applied to the set of persons. For each travelling person, all applying person prices have to be summed up to
     * calculate the total amount of person prices. For whether a PersonPrice applies to a person, see PersonPrice.
     * </pre>
     *
     * <code>repeated .peakwork.api.accommodation.v1.offerdata.PersonPrice person_prices = 2;</code>
     */
    public java.util.List<com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder> 
         getPersonPricesBuilderList() {
      return getPersonPricesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.peakwork.api.accommodation.v1.offerdata.PersonPrice, com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder, com.peakwork.api.accommodation.v1.offerdata.PersonPriceOrBuilder> 
        getPersonPricesFieldBuilder() {
      if (personPricesBuilder_ == null) {
        personPricesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.peakwork.api.accommodation.v1.offerdata.PersonPrice, com.peakwork.api.accommodation.v1.offerdata.PersonPrice.Builder, com.peakwork.api.accommodation.v1.offerdata.PersonPriceOrBuilder>(
                personPrices_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        personPrices_ = null;
      }
      return personPricesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:peakwork.api.accommodation.v1.offerdata.PriceSet)
  }

  // @@protoc_insertion_point(class_scope:peakwork.api.accommodation.v1.offerdata.PriceSet)
  private static final com.peakwork.api.accommodation.v1.offerdata.PriceSet DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.peakwork.api.accommodation.v1.offerdata.PriceSet();
  }

  public static com.peakwork.api.accommodation.v1.offerdata.PriceSet getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PriceSet>
      PARSER = new com.google.protobuf.AbstractParser<PriceSet>() {
    @java.lang.Override
    public PriceSet parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PriceSet(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PriceSet> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PriceSet> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.peakwork.api.accommodation.v1.offerdata.PriceSet getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

