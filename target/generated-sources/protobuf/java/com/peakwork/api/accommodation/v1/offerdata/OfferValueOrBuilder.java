// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offerdata.proto

package com.peakwork.api.accommodation.v1.offerdata;

public interface OfferValueOrBuilder extends
    // @@protoc_insertion_point(interface_extends:peakwork.api.accommodation.v1.offerdata.OfferValue)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * optional - Holds a single final price for the offer. One of object_price or price_set_keys must be used.
   * It is the easiest form of an offer price. Example: if the object_price is 50 for a given combination of
   * accommodation, rate, room, board, arrival date and LOS and the currency is set to EUR, that exact offer costs 50â‚¬
   * and no further price calculation is required.
   * </pre>
   *
   * <code>double object_price = 3;</code>
   */
  double getObjectPrice();

  /**
   * <pre>
   * optional - Used to represent a complex pricing structure using daily and person specific prices.
   * One of price_set_keys or object_price must be used.
   * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
   * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
   * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
   * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
   * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
   * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
   * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
   * price for each consecutive day of the stay, starting with the first.
   * Price sets can also be referenced multiple times. Example:
   * - Position 0: PriceSet A -&gt; Base price
   * - Position 1: PriceSet B -&gt; Day 1
   * - Position 2: PriceSet B -&gt; Day 2
   * - Position 3: PriceSet C -&gt; Day 3
   * - Position 4: PriceSet D -&gt; Day 4
   * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
   * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
   * (PriceSet A + 2*PriceSet B + PriceSet C).
   * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
   * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
   * and summing up the price sets up to different lengths of the list.
   * See PriceSet for how to calculate the price of a single price set.
   * </pre>
   *
   * <code>repeated uint32 price_set_keys = 2;</code>
   */
  java.util.List<java.lang.Integer> getPriceSetKeysList();
  /**
   * <pre>
   * optional - Used to represent a complex pricing structure using daily and person specific prices.
   * One of price_set_keys or object_price must be used.
   * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
   * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
   * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
   * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
   * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
   * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
   * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
   * price for each consecutive day of the stay, starting with the first.
   * Price sets can also be referenced multiple times. Example:
   * - Position 0: PriceSet A -&gt; Base price
   * - Position 1: PriceSet B -&gt; Day 1
   * - Position 2: PriceSet B -&gt; Day 2
   * - Position 3: PriceSet C -&gt; Day 3
   * - Position 4: PriceSet D -&gt; Day 4
   * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
   * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
   * (PriceSet A + 2*PriceSet B + PriceSet C).
   * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
   * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
   * and summing up the price sets up to different lengths of the list.
   * See PriceSet for how to calculate the price of a single price set.
   * </pre>
   *
   * <code>repeated uint32 price_set_keys = 2;</code>
   */
  int getPriceSetKeysCount();
  /**
   * <pre>
   * optional - Used to represent a complex pricing structure using daily and person specific prices.
   * One of price_set_keys or object_price must be used.
   * Complex prices are given as a list of references to PriceSet entities (see PriceSet). The context of an OfferValue
   * always contains a map of PriceSet objects (e.g. see Accommodation_OfferData). Each PriceSet in the map has a unique
   * key. This key is used to reference a price set in the price_set_keys list. Each entry references a price set.
   * Multiple price sets can be referenced in order to represent daily prices. Each entry in the list represents the
   * price for a single day of a stay, whereby a price itself is again a complex price structure to allow person prices
   * (see PriceSet). The position of a price set in the list denotes which day of the stay a price is valid for. The
   * first entry in the list denotes a base price, that is applied to the whole travel. The following entries denote the
   * price for each consecutive day of the stay, starting with the first.
   * Price sets can also be referenced multiple times. Example:
   * - Position 0: PriceSet A -&gt; Base price
   * - Position 1: PriceSet B -&gt; Day 1
   * - Position 2: PriceSet B -&gt; Day 2
   * - Position 3: PriceSet C -&gt; Day 3
   * - Position 4: PriceSet D -&gt; Day 4
   * In order to calculate the final price for a stay, the length of stay has to be considered. Given a length of stay
   * of x, the price sets from 0 to x have to be summed up, e.g. for LOS 3 sum up positions 0,1,2,3 of the list
   * (PriceSet A + 2*PriceSet B + PriceSet C).
   * This logic allows for an OfferValue to be valid for multiple different lengths of stay. E.g. given the same
   * OfferValue for LOSs 1-5, you can calculate 5 different offers (LOSs 1,2,3,4,5) using this single OfferValue object
   * and summing up the price sets up to different lengths of the list.
   * See PriceSet for how to calculate the price of a single price set.
   * </pre>
   *
   * <code>repeated uint32 price_set_keys = 2;</code>
   */
  int getPriceSetKeys(int index);

  /**
   * <pre>
   * optional - List of DRV GlobalTypes marking meta information about an offer
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
   */
  java.util.List<com.peakwork.api.accommodation.v1.common.GlobalType> 
      getGlobalTypesList();
  /**
   * <pre>
   * optional - List of DRV GlobalTypes marking meta information about an offer
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
   */
  com.peakwork.api.accommodation.v1.common.GlobalType getGlobalTypes(int index);
  /**
   * <pre>
   * optional - List of DRV GlobalTypes marking meta information about an offer
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
   */
  int getGlobalTypesCount();
  /**
   * <pre>
   * optional - List of DRV GlobalTypes marking meta information about an offer
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
   */
  java.util.List<? extends com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder> 
      getGlobalTypesOrBuilderList();
  /**
   * <pre>
   * optional - List of DRV GlobalTypes marking meta information about an offer
   * </pre>
   *
   * <code>repeated .peakwork.api.accommodation.v1.GlobalType global_types = 1;</code>
   */
  com.peakwork.api.accommodation.v1.common.GlobalTypeOrBuilder getGlobalTypesOrBuilder(
      int index);
}
