syntax = "proto3";


package peakwork.api.accommodation.v1.basedata;

option java_package = "com.peakwork.api.accommodation.v1.basedata";

option java_multiple_files = true;
import "google/api/annotations.proto";
import "google/rpc/status.proto";
import "common.proto";


// Represents an accommodation, e.g. a hotel, within a supplier's accommodation portfolio. This entity contains meta
// information about the accommodation, e.g. to give out the the end customer.
message Accommodation {
	// mandatory - Identifies an accommodation within the scope of one supplier, i.e. it must be unique per supplier. A
	// supplier can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
	// accommodation from the supplier's system has the same supplier_accommodation_id, whenever it is referenced in the
	// Accommodation API. This is especially important, when updating accommodation data. Data of an accommodation with
	// the same identifier will be replaced, since they are considered to reference the same accommodation entity.
	string supplier_accommodation_id = 1;
	// mandatory - The names of the accommodation in multiple languages as a map. At least one name must be given.
	// - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
	// being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
	// - value (string): the name of the accommodation in the corresponding language
	map<string, string> name = 2;
	// mandatory - Address of the accommodation
	Address address = 3;
	// optional - Geographical coordinates of the accommodation
	Coordinates coordinates = 4;
	// optional - List of airports, that can be used for arrival at the accommodation. Each entry denotes an airport in
	// IATA code format.
	repeated string arrival_airports = 5;
	// mandatory - Accommodation rating in form of stars. Possible values from 0-7 in steps of 0.5:
	// [ 0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6,5, 7 ]
	double star_rating = 6;
	// optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
	// back to the supplier, when a booking of an offer for this rate is made, in order for the supplier to be able to
	// correctly book the offer in its system.
	map<string, string> booking_payload = 7;
}

// Represents a world location in form of an address.
message Address {
	// mandatory - City of the address.
	string city = 1;
	// mandatory - Street of the address.
	string street = 2;
	// optional - Zip code of the address.
	string zip_code = 3;
	// mandatory - Country of the address
	string country = 4;
}

// Geographical coordinates in form of latitude and longitude used to express the exact location of an accommodation.
message Coordinates {
	// mandatory - Latitude of the coordinates, eg.: 25.799891
	double latitude = 5;
	// mandatory - Longitude of the coordinates, eg.: -102.744140
	double longitude = 6;
}

// Represents a rate (or more precisely: a rate type) of a supplier's accommodation portfolio. A rate has two purposes:
// - Distinguishing multiple different prices for the same travel (i.e. accommodation, room, board, arrival date, LOS
//   combination). There might be multiple offers for the same travel, e.g. a non refundable and a refundable price.
//   This can be done by creating multiple offers with the same accommodation, room, board, arrival date, LOS
//   combination but different rates.
// - Transporting meta information about an offer, e.g. for booking purposes or for displaying to the customer.
//
// A rate can be used for multiple offers. It has no direct connection to other base data entities. Therefore, a rate
// can for example be used in offers of only a single accommodation or even for multiple different accommodations.
// The supplier is free on how to distinguish rates from each other.
message Rate {
	// mandatory - Identifies a rate within the scope of one supplier, i.e. it must be unique per supplier. A supplier
	// can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same rate
	// from the supplier's system has the same rate_identifier, whenever it is referenced in the Accommodation API. This
	// is especially important, when updating rate data. Data of a rate with the same identifier will be replaced, since
	// they are considered to reference the same rate entity.
	string rate_identifier = 1;
	// optional - List of DRV GlobalTypes giving meta information about the rate (i.e. all offers for the rate)
	repeated  GlobalType global_types = 2;
	// optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
	// back to the supplier, when a booking of an offer for this rate is made, in order for the supplier to be able to
	// correctly book the offer in its system.
	map<string, string> booking_payload = 3;
	// mandatory - Denotes, whether the rate is refundable (true) or not (false).
	bool refundable = 4;
	// optional - List of company types, that the rate is valid for. This is an indicator for the distribution partners of
	// to which type of company (B2B) they are allowed to resell the offers to. If not given, no restriction is applied.
	repeated TargetCompanyType target_company_types = 5;

	// optional - Points of sale -  defined as list of countries, that the rate is valid for. This is an indicator for the distribution partners of
	// which countries they are allowed to sell the offers in. Countries are given as ISO 3166-1 Alpha-2 code. If not
	// given, no country restriction is applied.
	repeated string points_of_sale = 6;

	// optional - default: UNRESTRICTED
	// Defines if offers sold with this rate can be used freely or are they restricted only to be sold inside package (eg. together with flight)
	UsageType usage = 7;
}

// Enumeration of possible usage types
enum  UsageType {
	// can be used in any combination (etc in package or separately -hotel only )
	UNRESTRICTED = 0;
	// can be used only in package (eg. together with flight)
	PACKAGE = 1;
}


// Enumeration of possible company types
enum TargetCompanyType {
	// A company acting as a tour operator.
	TOUROP = 0;
	// A company acting as a meta searcher.
	METASEARCHER = 1;
	// A company acting as an online travel agency.
	OTA = 2;
	// A company acting as an travel agency.
	TA = 3;
}

// Represents a room (or more precisely: a room type) of a supplier's accommodation portfolio and contains the meta
// information of that room, e.g. to give out the the end customer.
//
// A room entity does not necessarily correspond to an actual physical room. It is rather a category of physical rooms
// determined by the supplier. Therefore, a room is a global object used by a supplier and not directly connected to an
// accommodation, board or rate. The connection between rooms and other base entities is indirect and comes from offers.
// Offers connect rooms with other entities like accommodations. That means, that for example a room is used only
// in a single accommodation, if the relevant meta information of said room is specific to an accommodation, or it can
// be used in multiple accommodations, if the meta information is independent of the accommodation (e.g. "a standard
// double room"). A supplier may therefore categorize rooms by its own criteria.
message Room {
	// mandatory - Identifies a room within the scope of one supplier, i.e. it must be unique per supplier. A supplier
	// can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
	// room from the supplier's system has the same room_identifier, whenever it is referenced in the Accommodation API.
	// This is especially important, when updating rate data. Data of a rate with the same identifier will be replaced,
	// since they are considered to reference the same rate entity.
	string room_identifier = 1;
	// mandatory - The names of the room in multiple languages as a map. At least one name must be given.
	// - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
	// being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
	// - value (string): the name of the room in the corresponding language
	map<string, string> name = 2;
	// mandatory - List of DRV GlobalTypes giving meta information about the room.
	repeated GlobalType global_types = 3;
	// optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
	// back to the supplier, when a booking of an offer for this room is made, in order for the supplier to be able to
	// correctly book the offer in its system.
	map<string, string> booking_payload = 4;
	// mandatory - Defines the occupancy of the room, i.e. which constellations of persons are possible (e.g. number of
	// adults, children, infants).
	//
	// An occupancy allows for multiple constellations of persons. But since an occupancy is
	// using count ranges of different person types to build a cross product of different counts of person types (see
	// Occupancy), it is not possible to express every theoretically possible set of person constellations with one
	// occupancy.
	// Example: only the following constellations are allowed: 1A+0C, 2A+1C => this constellation is not possible.
	// Since a room only allows one possible occupancy, such a case of non expressible constellations must be expressed
	// with multiple different rooms, in the exemplary case: 2 rooms, with 1 occupancy each: 1 with 1A+0C, 1 with 2A+1C.
	Occupancy occupancy = 5;
}

// Represents an occupancy, i.e. a set of possible combinations of persons (pax) in a travel. An occupancy distinguishes
// between three types of persons: adults, children and infants. To which type a person is assigned is determined by the
// persons's age (see min_child_age and max_child_age).
// The set of possible combinations of persons allowed by an occupancy is determined by a set of restrictions on the
// counts of persons per person type as well as the overall person count. If a combination of persons meets all of these
// restrictions, this combination is included in the set of possible person combinations, that the occupancy defines.
message Occupancy {
	// optional - default: 1 - Minimum number of persons allowed in total. Must be greater than or equal to 1.
	int32 min_pax = 1;
	// mandatory - Maximum number of persons allowed in total.
	int32 max_pax = 2;
	// optional - default: 1 - Minimum number of adults allowed. Must be greater than or equal to 1.
	int32 min_adults = 3;
	// optional - Maximum number of adults allowed.
	int32 max_adults = 4;
	// optional - default: 0 - Minimum number of children allowed.
	int32 min_children = 5;
	// optional - default: 0 - Maximum number of children allowed.
	int32 max_children = 6;
	// optional - default: 2 - Minimum age in years, where a person is considered a child (inclusive). Persons younger
	// than this age are considered infants. Persons older than this age are considered either children or adults,
	// depending on max_child_age.
	int32 min_child_age = 7;
	// optional - default: 17 - Maximum age in years, where a person is considered a child (inclusive). Persons older than
	// this age are considered adults. Persons younger than this age are considered either children or infants, depending
	// on min_child_age.
	int32 max_child_age = 8;
	// optional - Maximum number of infants allowed. If not given, no maximum restrictions towards infants apply.
	int32 max_infants = 9;
	// optional - default: false - Defines whether or not infants are counted towards the total pax restrictions (min_pax
	// and max_pax). If true, infants count towards the total pax count, i.e. the total pax count including infants
	// cannot exceed the max_pax restrictions and the min_pax restriction can be met by infants. If false, infants do not
	// count towards the total pax count, i.e. the total pax count including infants may exceed max_pax and infants do not
	// count towards min_pax.
	bool infants_apply_to_occupancy = 10;
}


// Represents a board (or more precisely: a board type), also called meal of a supplier's accommodation portfolio and
// contains the meta information of that board, e.g. to give out the the end customer.
//
// A board is a global object used by a supplier and not directly connected to an accommodation, room or rate. The
// connection between boards and other base entities is indirect and comes from offers. Offers connect boards with other
// entities like accommodations. This means, that a board can for example be used only in a single accommodation, if the
// relevant meta information of said board is specific to an accommodation, or it can be used in multiple
// accommodations, if the meta information is independent of the accommodation (e.g. "a standard bed and breakfast").
// A supplier may therefore categorize boards by its own criteria.
message Board {
	// mandatory - Identifies a board within the scope of one supplier, i.e. it must be unique per supplier. A supplier
	// can choose the identifier arbitrarily but must make sure, that the identifier is consistent, i.e. the same
	// board from the supplier's system has the same board_identifier, whenever it is referenced in the Accommodation API.
	//  This is especially important, when updating rate data. Data of a rate with the same identifier will be replaced,
	// since they are considered to reference the same rate entity.
	string board_identifier = 1;
	// mandatory - The names of the board in multiple languages as a map. At least one name must be given.
	// - key (string): Language code in the format language_country with language being a ISO 639-1 language code and country
	// being a ISO 3166-1 Alpha-2 country code (e.g. "en_GB", "en_US", "de_DE" or "de_CH")
	// - value (string): the name of the board in the corresponding language
	map<string, string> name = 2;
	// mandatory - List of DRV GlobalTypes giving meta information about the board.
	repeated  GlobalType global_types = 3;
	// optional - Meta information used for booking purposes. These are arbitrary key-value pairs, that are transported
	// back to the supplier, when a booking of an offer for this board is made, in order for the supplier to be able to
	// correctly book the offer in its system.
	map<string, string> booking_payload = 4;
}

